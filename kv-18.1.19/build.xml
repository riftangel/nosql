<?xml version="1.0"?>

<!-- ============================================ -->
<!-- Ant Build File for KVStore                   -->
<!-- ============================================ -->

<project name="KV" default="jar" basedir="."
         xmlns:jacoco="antlib:org.jacoco.ant"
         xmlns:ivy="antlib:org.apache.ivy.ant">
  <description>Compile and test KVStore</description>

  <fail message="Ant 1.9.0 or greater is required">
    <condition><not><antversion atleast="1.9.0"/></not></condition>
  </fail>

  <property file="build.properties"/>
  <property file="extlib-revision.properties"/>

  <property name="copyright"
            value="Copyright (c) 2011, 2018 Oracle and/or its affiliates.  All rights reserved."/>

  <property name="srcdir" value="${basedir}/src"/>
  <property name="builddir" value="${basedir}/build"/>
  <property name="destdir" value="${builddir}/classes"/>
  <property name="libdir" value="${basedir}/lib"/>
  <property name="bindir" value="${basedir}/bin"/>
  <property name="exttabbindir" value="${basedir}/exttab/bin"/>
  <property name="example.srcdir" value="${basedir}/examples"/>
  <property name="example.destdir" value="${builddir}/examples/classes"/>
  <property name="extlibdir" value="${libdir}/kv-external"/>
  <property name="docdir" value="${basedir}/doc"/>
  <property name="dist.dir" value="${basedir}/dist"/>
  <property name="dist.exttabbindir" value="${basedir}/dist/exttab/bin"/>
  <property name="dist.exampledir" value="${basedir}/dist/examples"/>
  <property name="dist.libdir" value="${basedir}/dist/lib"/>
  <property name="dist.destdir" value="${builddir}/dist"/>
  <property name="dist.srcdir" value="${basedir}/dist/src"/>
  <property name="dist.testdir" value="${basedir}/dist/test"/>
  <property name="miscdir" value="${basedir}/misc"/>
  <property name="tmpdir" value="${builddir}/tmp"/>
  <property name="javadoc.tmpdir" value="${builddir}/javadoc/tmp"/>
  <property name="test.srcdir" value="${basedir}/test"/>
  <property name="test.destdir" value="${builddir}/test/classes"/>
  <property name="test.resultsdir" value="${builddir}/test-results"/>
  <property name="test.kvsandbox" value="${builddir}/kvsandbox"/>
  <property name="test.security.enable" value="false"/>
  <property name="test.failurecopydir" value="${builddir}/test/failures"/>
  <property name="test.copylimit" value="10"/>
  <property name="test.policy" value="${test.srcdir}/unittest.security.policy"/>
  <property name="test.showoutput" value="true"/>
  <property name="test.clientCallPassed"
            location="${test.resultsdir}/testclient-passed"/>
  <property name="test.coherenceCallPassed"
            location="${test.resultsdir}/testcoherence-passed"/>
  <!-- The class file names of test classes that should be skipped.  By
       default, skip some export/import tests that do not run
       dependably. -->
  <property name="skip"
            value="**/oracle/kv/util/expimp/ExportExitCodeTest.class
                   **/oracle/kv/util/expimp/ObjectStoreExportTest.class
                   **/oracle/kv/util/expimp/ObjectStoreImportTest.class"/>
  <property name="standalone.destdir" value="${builddir}/test/standalone"/>
  <property name="javadoc" value="${dist.dir}/javadoc/java-api"/>
  <property name="internal.javadoc" value="${dist.dir}/javadoc/internal-javadoc"/>
  <property name="javadoc.proxy.port" value="80"/>
  <property name="javadoc.css" value="${docdir}/style.css"/>
  <property name="javadoc.exec" value="javadoc"/>
  <property name="junit.haltonfailure" value="false"/>
  <property name="example.javadoc" value="${dist.dir}/javadoc/examples"/>
  <property name="example.kvstore" value="${basedir}/examples"/>
  <property name="jarfile" value="${dist.libdir}/kvstore.jar"/>
  <property name="jareefile" value="${dist.libdir}/kvstore-ee.jar"/>
  <property name="kvclientjarfile" value="${dist.libdir}/kvclient.jar"/>
  <property name="kvcoherencejarfile" value="${dist.libdir}/kvcoherence.jar"/>
  <property name="kvclijarfile" value="${dist.libdir}/kvcli.jar"/>
  <property name="kvtooljarfile" value="${dist.libdir}/kvtool.jar"/>
  <property name="sqljarfile" value="${dist.libdir}/sql.jar"/>
  <property name="testjarfile" value="${dist.libdir}/kvstoretest.jar"/>
  <property name="version" value=""/>
  <property name="build.debug" value="on"/>
  <property name="build.deprecation" value="off"/>
  <!-- Source code version for server files -->
  <property name="jdk.source.version" value="1.8"/>
  <!-- Generated byte code version for server files -->
  <property name="jdk.target.version" value="1.8"/>
  <property name="jdk.client.version" value="1.8"/> <!-- Client files -->
  <!-- Java class file version for client files, 52 is Java 8 -->
  <property name="jdk.client.max.classfile.version" value="52"/>
  <!-- Regular expression of versions of Java to use for compiling -->
  <property name="jdk.allowed.versions" value="(1.8|9)"/>
  <property name="rscdir" value="${builddir}/resources"/>
  <property name="exttab.sqlsrc" value="${basedir}/resources/sql"/>
  <property name="exttab.rscdir" value="${rscdir}/sql"/>
  <property name="version.rscdir" value="${rscdir}/version"/>
  <property name="build.propertyfile"
            value="${dist.destdir}/build.properties"/>
  <property name="zipfile-ce" value="${basedir}/kv-ce.zip"/>
  <property name="zipfile-ee" value="${basedir}/kv-ee.zip"/>
  <property name="zipfile-be" value="${basedir}/kv-be.zip"/>
  <property name="zipfile-client" value="${basedir}/kv-client.zip"/>
  <property name="zipfile-examples" value="${basedir}/kv-examples.zip"/>
  <property name="zipfile-test" value="${basedir}/kv-test.zip"/>
  <property name="zipfile-docs" value="${basedir}/kv-docs.zip"/>
  <property name="msg_file_name" value="messages.properties"/>
  <property name="msg_file_name_us" value="messages_en_US.properties"/>
  <property name="msgs_src_dir"  value="${basedir}/resources/msgs"/>
  <property name="rpmbuilddir" value="${builddir}/rpm"/>
  <property name="java.apidoc"
            value="http://docs.oracle.com/javase/8/docs/api"/>
  <property name="avro.apidoc"
            value="http://avro.apache.org/docs/1.7.6/api/java"/>
  <property name="jackson.apidoc"
            value="http://fasterxml.github.io/jackson-core/javadoc/1.9"/>
  <!--  I'm told that the following is a better option than the link to the
        3.7.1 version, as this will be updated to point to the then-current
        version, but it doesn't work well.
        <link href="http://www.oracle.com/pls/topic/lookup?ctx=E26099-01&amp;id=COHR"/>
  -->
  <property name="coherence.apidoc"
            value="http://docs.oracle.com/cd/E24290_01/coh.371/e22843"/>
  <property name="hadoop.common.apidoc"
            value="http://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/api/"/>
  <property name="hadoop.mapreduce.client.apidoc"
            value="http://hadoop.apache.org/docs/current/hadoop-mapreduce-client/hadoop-mapreduce-client-core/apidocs/"/>
  <property name="hadoop.apidoc"
            value="http://hadoop.apache.org/docs/stable/api"/>
  <property name="hive.apidoc"
            value="http://hive.apache.org/javadocs/r1.2.2/api"/>
  <property name="KVSQL.grammar"
            value="${srcdir}/oracle/kv/impl/query/compiler/parser/KVQL.g4"/>
  <property name="eclipse.jar" value="${extlibdir}/ecj.jar"/>

  <!-- this is the jar required to generate a parser and is not deployed
       with the product. Only the runtime is deployed.
  -->
  <property name="antlr.classpath"  value="${extlibdir}/antlr4.jar"/>

  <!--
    Can be used to override JVM args for <java> tasks, for example:
      ant "-Djvmargs=-Xmx32M -client" ...
  -->
  <property name="jvmargs" value=""/>

  <!--
    Can be used to specify a different JVM for <java> tasks, for example:
      ant "-Djvm=/usr/local/jdk1.8.0_51/bin/java" ...
  -->
  <property name="jvm" value="java"/>

  <!-- Check whether we're running under Java 8 -->
  <condition property="using.jdk8">
    <equals arg1="1.8" arg2="${ant.java.version}"/>
  </condition>

  <!-- Must add -XX:+UseZingMXBeans when running under Zing.  -->
  <condition property="zing.jvm.options"
      value="-XX:+UseZingMXBeans"
       else="">
    <equals arg1="${java.vendor}" arg2="Azul Systems, Inc."/>
  </condition>

  <!-- Check whether we're performing an internal build or one using the
       public CE sources -->
  <condition property="internal.build">
      <available file="${miscdir}"/>
  </condition>

  <condition property="internal.build.jdk8.home">
      <and>
          <isset property="internal.build"/>
          <isset property="jdk8.home"/>
      </and>
  </condition>

  <!-- Whether to use and check for the right Java version for client
       files.  Doing this is very slow on Windows because it has trouble
       with long lines that prevents using parallel execution of the
       needed python command, so only do this on Unix by default, and
       only for internal builds. -->
  <condition property="check.client.version" else="false">
    <and>
      <os family="unix"/>
      <isset property="internal.build"/>
    </and>
  </condition>

  <!-- Classes to exclude from client tests.  By default, excludes
       KVInputFormatBasicTest if we're running the client test with Java
       6, since that test refers to Hadoop libraries that require Java
       7. -->
  <condition property="test.client.excludes"
             value="**/KVInputFormatBasicTest.java"
             else="">
      <isset property="jdk6.home"/>
  </condition>

  <condition property="show.test.client.excludes">
      <not><equals arg1="${test.client.excludes}" arg2=""/></not>
  </condition>

  <!-- Specify override arguments to standalone tests -->
  <property name="args" value=""/>

  <!-- Specify override arguments to JE data verifier for KVS unit test -->
  <property name="test.je.env.runVerifier" value="true"/>
  <property name="test.je.env.verifierSchedule" value="* * * * *"/>

  <!-- JAR files to put in kvstore.jar classpath. Usage.jar is an empty placeholder for 
       classes to load for the pluggable collector recorder -->
  <property name="jar.dependencies"
            value="je.jar
                   jackson-core-asl.jar
                   jackson-mapper-asl.jar
                   avro.jar
                   jsch.jar
                   antlr4-runtime.jar
                   jline.jar
                   jackson-core.jar
                   httpasyncclient.jar
                   httpcore.jar
                   httpclient.jar
                   httpcore-nio.jar
                   commons-logging.jar
                   reactive-streams.jar
                   usage.jar
                   "/>

  <property name="kvtooljar.dependencies"
            value="jersey-client.jar
                   jersey-client-1.13.jar
                   oracle.cloud.storage.api.jar
                   oracle.cloud.storage.api-13.0.0.jar
                   jettison.jar
                   jettison-1.1.jar
                   jersey-core.jar
                   jersey-core-1.13.jar
                   kvclient.jar"/>

  <!-- JAR files to put in kvstore-ee.jar classpath. -->
  <property name="jaree.dependencies"
	    value="oraclepki.jar
		   osdt_core.jar
		   osdt_cert.jar"/>

  <!-- JAR files to put in kvclient.jar classpath. -->
  <property name="clientjar.dependencies"
            value="jackson-core-asl.jar
                   jackson-mapper-asl.jar
                   avro.jar
                   antlr4-runtime.jar
                   kvstore-ee.jar" />

  <!-- JAR files to put in kvcoherence.jar classpath -->
  <property name="coherencejar.dependencies"
            value="kvclient.jar"/>

  <!-- JAR files to put in kvcli.jar classpath -->
  <property name="clijar.dependencies"
            value="kvstore.jar"/>

  <!-- JAR files to put in sql.jar classpath -->
  <property name="sqljar.dependencies"
            value="kvclient.jar jline.jar"/>

  <!-- JAR files to put in kvstoretest.jar classpath -->
  <property name="testjar.dependencies"
            value="kvstore.jar
                   kvcli.jar
                   sql.jar
                   junit.jar
                   hamcrest-core.jar
                   kvtool.jar
                   httpasyncclient.jar
                   httpcore.jar
                   httpclient.jar
                   httpcore-nio.jar
                   commons-logging.jar"/>

  <!-- Make sure classpath is set, to avoid errors in FindBugs -->
  <property name="classpath" value=""/>

  <!-- Clover -->
  <property name="clover.tmpdir" value="${basedir}/clover"/>
  <property name="clover.initstring" location="${clover.tmpdir}/kvstorecoverage.db"/>
  <!-- Should be changed to the path for clover.jar. -->
  <!-- Not referenced here.  Are there hidden references elsewhere? -->
  <property name="clover.libdir" value="/scratch/tests/app/ant/lib"/>
  <property name="clover.excludes" value="**/examples/**
                                          **/standalone/**
                                          **/standalone/api/**
                                          avro/**
                                          coherence/**"/>

  <!-- JaCoCo -->
  <!-- directory that contains the JaCoCo jar files: -->
  <property name="jacoco.libdir" value="${extlibdir}"/>
  <property name="jacoco.outputdir" value="${builddir}/jacoco"/>
  <property name="jacoco.exec" value="${jacoco.outputdir}/jacoco.exec"/>
  <property name="jacoco.report" value="${jacoco.outputdir}/report"/>
  <path id="jacoco.classpath">
    <pathelement location="${jacoco.libdir}/jacocoant.jar"/>
    <pathelement location="${jacoco.libdir}/jacocoagent.jar"/>
  </path>

  <!-- Checkstyle -->
  <property name="checkstyle.include" value="**/*.java"/>

  <!-- Findbugs -->
  <property name="findbugs.output"
            value="emacs"/>
  <property name="findbugs.output.file"
            value=""/>

  <!-- Eclipse warnings -->

  <!-- Override to use a non-standard Eclipse properties file. -->
  <property name="eclipse.properties"
            value="${basedir}/.settings/org.eclipse.jdt.core.prefs"/>

  <!-- Set to empty (-Dwarnings.format=) for standard Eclipse format. -->
  <property name="warnings.format" value="-Xemacs"/>

  <!-- ============================================================ -->
  <!-- Paths and filesets, referenced by ID                         -->
  <!-- ============================================================ -->

  <!-- Clover -->
  <path id="clover.classpath">
    <pathelement path="${clover.libdir}/clover.jar"/>
    <pathelement path="${clover.libdir}/velocity.jar"/>
    <pathelement path="${clover.libdir}/cenquatasks.jar"/>
  </path>

  <path id="src.classpath">
    <pathelement path="${classpath}"/>
    <fileset refid="libraries" />
  </path>

  <path id="examples.classpath">
    <fileset dir="lib" includes="*.jar" excludes="kv*.jar"/>
    <pathelement path="${classpath}"/>
    <pathelement location="${dist.libdir}/kvstore.jar"/>
    <pathelement location="${dist.libdir}/kvclient.jar"/>
    <pathelement location="${dist.libdir}/kvcoherence.jar"/>
    <pathelement location="${dist.libdir}/kvstore-ee.jar"/>
    <pathelement location="${extlibdir}/avro.jar"/>
    <pathelement location="${extlibdir}/jackson-core-asl.jar"/>
    <pathelement location="${extlibdir}/jackson-mapper-asl.jar"/>
    <pathelement location="${extlibdir}/hadoop-common.jar"/>
    <pathelement location="${extlibdir}/hadoop-mapreduce-client-core.jar"/>
    <pathelement location="${extlibdir}/hadoop-annotations.jar"/>
    <pathelement location="${extlibdir}/hive-exec.jar"/>
    <pathelement location="${extlibdir}/hive-serde.jar"/>
    <pathelement location="${extlibdir}/hive-metastore.jar"/>
    <pathelement location="${extlibdir}/commons-logging.jar"/>
    <pathelement location="${extlibdir}/coherence.jar"/>
    <pathelement location="${extlibdir}/antlr4-runtime.jar"/>
    <pathelement location="${extlibdir}/reactive-streams.jar"/>
 </path>

  <path id="test.classpath">
    <pathelement path="${classpath}"/>
    <pathelement location="${dist.libdir}/kvstore.jar"/>
    <pathelement location="${dist.libdir}/kvtool.jar"/>
    <pathelement location="${dist.libdir}/kvstore-ee.jar"/>
    <pathelement location="${dist.libdir}/kvcoherence.jar"/>
    <pathelement location="${dist.libdir}/kvcli.jar"/>
    <pathelement location="${dist.libdir}/sql.jar"/>
    <pathelement location="${test.destdir}"/>
    <pathelement location="${extlibdir}/junit.jar"/>
    <pathelement location="${extlibdir}/hamcrest-core.jar"/>
    <pathelement location="${extlibdir}/easymock.jar"/>
    <pathelement location="${extlibdir}/cglib-nodep.jar"/>
    <pathelement location="${extlibdir}/objenesis.jar"/>
    <pathelement location="${extlibdir}/apacheds-service.jar"/>
    <pathelement location="${extlibdir}/hadoop-minikdc.jar"/>
    <pathelement location="${extlibdir}/json-smart.jar"/>
    <pathelement location="${extlibdir}/nimbus-jose-jwt.jar"/>
    <pathelement location="${example.destdir}"/>
    <pathelement location="${extlibdir}/httpasyncclient.jar"/>
    <pathelement location="${extlibdir}/httpcore.jar"/>
    <pathelement location="${extlibdir}/httpclient.jar"/>
    <pathelement location="${extlibdir}/httpcore-nio.jar"/>
    <pathelement location="${extlibdir}/netty.jar"/> 
    <fileset refid="libraries" />
    <pathelement path="${test.srcdir}"/>
  </path>

  <path id="testclient.classpath">
    <pathelement path="${classpath}"/>
    <pathelement location="${dist.libdir}/kvclient.jar"/>
    <pathelement location="${extlibdir}/hadoop-common.jar"/>
    <pathelement location="${extlibdir}/hadoop-mapreduce-client-core.jar"/>
    <pathelement location="${extlibdir}/hadoop-annotations.jar"/>
    <pathelement location="${extlibdir}/hive-exec.jar"/>
    <pathelement location="${extlibdir}/hive-serde.jar"/>
    <pathelement location="${extlibdir}/hive-metastore.jar"/>
    <pathelement location="${extlibdir}/hive-jdbc-standalone.jar"/>
    <pathelement location="${extlibdir}/commons-logging.jar"/>
    <pathelement location="${extlibdir}/avro.jar"/>
    <pathelement location="${extlibdir}/jackson-core-asl.jar"/>
    <pathelement location="${extlibdir}/jackson-mapper-asl.jar"/>
    <pathelement location="${test.destdir}"/>
    <pathelement location="${extlibdir}/junit.jar"/>
    <pathelement location="${extlibdir}/hamcrest-core.jar"/>
    <pathelement location="${extlibdir}/antlr4-runtime.jar"/>
  </path>

  <path id="testcoherence.classpath">
    <pathelement path="${classpath}"/>
    <pathelement location="${dist.libdir}/kvcoherence.jar"/>
    <pathelement location="${dist.libdir}/kvclient.jar"/>
    <pathelement location="${test.destdir}"/>
    <pathelement location="${test.srcdir}/oracle/kv/coherence/config"/>
    <pathelement location="${test.srcdir}"/>
    <pathelement location="${extlibdir}/coherence.jar"/>
    <pathelement location="${extlibdir}/junit.jar"/>
    <pathelement location="${extlibdir}/hamcrest-core.jar"/>
  </path>

  <path id="misc.class.path">
    <pathelement location="${destdir}"/>
    <pathelement location="."/>
  </path>

  <!-- Library JAR files to include in the classpath during building -->
  <fileset id="libraries" dir="${libdir}">
    <include name="*.jar"/>
    <include name="**/*.jar"/>
    <!-- gwt-dev is needed only when running gwtc; keep it out of the
         classpath otherwise. -->
    <exclude name="**/gwt-dev.jar"/>
    <exclude name="**/gwt-user.jar"/>
    <!--<exclude name="**/gwt-servlet-deps.jar"/>-->
    <exclude name="**/validation-api.jar"/>
    <!-- Eclipse compiler jar is not used for regular builds. -->
    <exclude name="**/ecj.jar"/>
    <!-- Exclude KV JARs when doing public builds -->
    <exclude name="kv*.jar"/>
  </fileset>

  <fileset id="libraries.junit" dir="${extlibdir}"
           includes="junit.jar, hamcrest-core.jar"/>

  <!-- Library JAR files to include during packaging -->
  <fileset id="libraries.package" dir="${extlibdir}"
           includes="${jar.dependencies} ${clientjar.dependencies} ${kvtooljar.dependencies}"/>

  <fileset id="libraries.package-ee" dir="${extlibdir}"
           includes="${jaree.dependencies}"/>

  <fileset id="jarclasses" dir="${destdir}"
           excludes="oracle/kv/**/exttab/*.class,
                     oracle/kv/coherence/*.class,
                     oracle/kv/coherence/pof/*.class,
                     oracle/kv/pubsub/*.class,
                     oracle/kv/impl/pubsub/**/*.class,
                     oracle/kv/impl/util/KVToolMain*.class,
                     oracle/kv/impl/security/wallet/*.class,
                     oracle/kv/impl/util/Wallet*.class
                     oracle/kv/impl/security/kerberos/*.class
                     oracle/kv/impl/security/oauth/*.class
                     oracle/kv/util/expimp/*.class
                     oracle/kv/impl/tif/esclient/security/*.class"
           includes="oracle/**/*.class"/>

  <fileset id="jareeclasses" dir="${destdir}"
           includes="oracle/kv/**/exttab/*.class,
                     oracle/kv/pubsub/*.class,
                     oracle/kv/impl/pubsub/**/*.class,
                     oracle/kv/impl/security/wallet/*.class,
                     oracle/kv/impl/util/WalletCommand*.class
                     oracle/kv/impl/security/kerberos/*.class
                     oracle/kv/impl/security/oauth/*.class
                     oracle/kv/impl/tif/esclient/security/*.class"/>

  <fileset id="kvtooljarclasses" dir="${destdir}"
           includes="oracle/kv/util/expimp/*.class,
                     oracle/kv/impl/util/KVToolMain*.class,
                     oracle/kv/impl/util/CommandParser.class,
                     oracle/kv/util/shell/ShellInputReader*.class"/>

  <fileset id="testclasses" dir="${test.destdir}"
           includes="**/*.class"/>

  <fileset id="testresources" dir="${test.srcdir}"
           includes="standalone/datacheck/*.avsc,
                     standalone/datacheck/*.ddl,
                     standalone/table/metadata/*.ddl,
                     standalone/coherence/*.avsc"/>

  <!-- Classes from JE required by the client -->
  <!-- TODO: prune these back as possible -->
  <fileset id="jeclientclasses" dir="${destdir}"
           includes="com/sleepycat/bind/tuple/TupleInput.class,
                     com/sleepycat/bind/tuple/TupleOutput.class,
                     com/sleepycat/je/BinaryEqualityComparator.class,
                     com/sleepycat/je/DatabaseException.class,
                     com/sleepycat/je/EnvironmentFailureException.class,
                     com/sleepycat/je/RunRecoveryException.class,
                     com/sleepycat/je/log/Loggable.class,
                     com/sleepycat/je/rep/ReplicatedEnvironment$State.class,
                     com/sleepycat/je/rep/ReplicatedEnvironmentStats.class,
                     com/sleepycat/je/rep/impl/networkRestore/NetworkBackupStats.class,
                     com/sleepycat/je/rep/net/DataChannel*.class,
                     com/sleepycat/je/rep/net/DataChannelFactory$ConnectOptions.class,
                     com/sleepycat/je/rep/net/InstanceLogger.class,
                     com/sleepycat/je/rep/utilint/net/AbstractDataChannel.class,
                     com/sleepycat/je/rep/utilint/net/SSLDataChannel*.class,
                     com/sleepycat/je/rep/utilint/net/SimpleDataChannel*.class,
                     com/sleepycat/je/utilint/BaseStat.class,
                     com/sleepycat/je/utilint/CollectionUtils*.class,
                     com/sleepycat/je/utilint/DbLsn.class,
                     com/sleepycat/je/utilint/DoubleExpMovingAvg.class
                     com/sleepycat/je/utilint/JVMSystemUtils.class,
                     com/sleepycat/je/utilint/LongAvgRate.class,
                     com/sleepycat/je/utilint/MapStatComponent.class,
                     com/sleepycat/je/utilint/PropUtil.class,
                     com/sleepycat/je/utilint/VLSN.class,
                     com/sleepycat/util/FastInputStream.class,
                     com/sleepycat/util/FastOutputStream.class,
                     com/sleepycat/util/PackedInteger.class,
                     com/sleepycat/util/UtfOps.class,
                     com/sleepycat/utilint/*.class">
      <patternset>
          <include id="jeclientclasses.r3" unless="disable.jeclientclasses.r3"/>
      </patternset>
  </fileset>

  <!-- Classes from JE required by the client for compatibility with R3.
       These classes can be removed starting with R5, when we no longer
       to maintain R3 compatibility during upgrades. -->
  <fileset id="jeclientclasses.r3" dir="${destdir}"
           includes="com/sleepycat/persist/EntityStore.class,
                     com/sleepycat/je/Transaction.class"/>

  <!-- Classes from the kv tree required for the client
       You should generally specify XXX*.class even if you only intend for
       XXX.class to be include if XXX has executable code so that
       clover-generated classes are included.  Classes in this list will
       be compiled with Java 8 compatibility. -->
  <!-- TODO: prune these back as possible -->
  <fileset id="kvclientclasses" dir="${destdir}"
           includes="oracle/kv/*.class,
                     oracle/kv/lob/*.class,
                     oracle/kv/avro/*.class,
                     oracle/kv/hadoop/*.class,
                     oracle/kv/hadoop/table/*.class,
                     oracle/kv/hadoop/hive/table/*.class,
                     oracle/kv/table/*.class,
                     oracle/kv/query/*.class,
                     oracle/kv/impl/admin/AdminFaultException*.class,
                     oracle/kv/impl/admin/CommandResult*.class,
                     oracle/kv/impl/admin/IllegalCommandException*.class,
                     oracle/kv/impl/api/**/*.class,
                     oracle/kv/impl/async/**/*.class,
                     oracle/kv/impl/client/**/*.class,
                     oracle/kv/impl/fault/*.class,
                     oracle/kv/impl/map/*.class,
                     oracle/kv/impl/measurement/*.class,
                     oracle/kv/impl/metadata/Metadata.class,
                     oracle/kv/impl/metadata/Metadata$*.class,
                     oracle/kv/impl/metadata/MetadataInfo*.class,
                     oracle/kv/impl/metadata/MetadataKey*.class,
                     oracle/kv/impl/mgmt/RepNodeStatusReceiver*.class,
                     oracle/kv/impl/mgmt/NodeStatusReceiver*.class,
                     oracle/kv/impl/param/LoadParameters*.class,
                     oracle/kv/impl/param/ParameterListener*.class,
                     oracle/kv/impl/query/runtime/*.class,
                     oracle/kv/impl/query/compiler/**/*.class,
                     oracle/kv/impl/query/types/**/*.class,
                     oracle/kv/impl/query/Query*.class,
                     oracle/kv/impl/rep/admin/RepNodeAdmin*.class,
                     oracle/kv/impl/rep/admin/RepNodeAdminAPI*.class,
                     oracle/kv/impl/rep/admin/RepNodeInfo*.class,
                     oracle/kv/impl/rep/admin/ResourceInfo*.class
                     oracle/kv/impl/rep/RepNodeStatus*.class,
                     oracle/kv/impl/rep/MasterRepNodeStats.class,
                     oracle/kv/impl/rep/NetworkRestoreStatus*.class,
                     oracle/kv/impl/rep/migration/PartitionMigrationStatus*.class,
                     oracle/kv/impl/security/AuthContext*.class,
                     oracle/kv/impl/security/ClientProxyCredentials*.class,
                     oracle/kv/impl/security/ContextProxy*.class,
                     oracle/kv/impl/security/MethodHandler*.class,
                     oracle/kv/impl/security/Ownable*.class,
                     oracle/kv/impl/security/PasswordManager*.class,
                     oracle/kv/impl/security/PasswordStore*.class,
                     oracle/kv/impl/security/ProxyCredentials*.class,
                     oracle/kv/impl/security/ProxyUtils*.class,
                     oracle/kv/impl/security/ResourceOwner*.class,
                     oracle/kv/impl/security/SessionAccessException*.class,
                     oracle/kv/impl/security/InvalidSignatureException*.class,
                     oracle/kv/impl/security/login/LoginHandle*.class,
                     oracle/kv/impl/security/login/LoginManager*.class,
                     oracle/kv/impl/security/login/LoginResult*.class,
                     oracle/kv/impl/security/login/LoginTarget*.class,
                     oracle/kv/impl/security/login/LoginToken*.class,
                     oracle/kv/impl/security/login/RepNodeLoginManager*.class,
                     oracle/kv/impl/security/login/SessionId*.class,
                     oracle/kv/impl/security/login/UserLogin.class,
                     oracle/kv/impl/security/login/UserLogin$*.class,
                     oracle/kv/impl/security/login/UserLoginAPI*.class,
                     oracle/kv/impl/security/login/UserLoginManager*.class,
                     oracle/kv/impl/security/login/KerberosClientCreds*.class,
                     oracle/kv/impl/security/login/KerberosInternalCredentials*.class,
                     oracle/kv/impl/security/login/KerberosLoginResult*.class,
                     oracle/kv/impl/security/ssl/*.class,
                     oracle/kv/impl/security/filestore/*.class,
                     oracle/kv/impl/security/util/KVStoreLogin*.class,
                     oracle/kv/impl/security/util/KerberosPrincipals*.class,
                     oracle/kv/impl/security/util/SNKrbInstance*.class,
                     oracle/kv/impl/security/util/FileSysUtils*.class,
                     oracle/kv/impl/security/wallet/*.class,
                     oracle/kv/impl/systables/*.class,
                     oracle/kv/impl/test/ExceptionTestHook*.class,
                     oracle/kv/impl/test/TestHook*.class,
                     oracle/kv/impl/test/TestStatus*.class,
                     oracle/kv/impl/topo/**/*.class,
                     oracle/kv/impl/util/ArrayPosition*.class
                     oracle/kv/impl/util/CommonLoggerUtils*.class,
                     oracle/kv/impl/util/ConfigurableService*.class,
                     oracle/kv/impl/util/Duration*.class,
                     oracle/kv/impl/util/ExternalDataSource*.class,
                     oracle/kv/impl/util/FastExternalizable*.class,
                     oracle/kv/impl/util/FormatUtils*.class,
                     oracle/kv/impl/util/HostPort*.class,
                     oracle/kv/impl/util/JsonUtils*.class,
                     oracle/kv/impl/util/KVThreadFactory*.class,
                     oracle/kv/impl/util/LogFormatter*.class,
                     oracle/kv/impl/util/Pair*.class,
                     oracle/kv/impl/util/PollCondition*.class,
                     oracle/kv/impl/util/ObjectUtil*.class,
                     oracle/kv/impl/util/RateLimiting.class,
                     oracle/kv/impl/util/RateLimiting$*.class,
                     oracle/kv/impl/util/RateLimitingLogger*.class,
                     oracle/kv/impl/util/ScheduleStart*.class,
                     oracle/kv/impl/util/SerialVersion*.class,
                     oracle/kv/impl/util/SerializationUtil*.class,
                     oracle/kv/impl/util/SerializeExceptionUtil*.class,
                     oracle/kv/impl/util/SortableString*.class,
                     oracle/kv/impl/util/TopologyLocator*.class,
                     oracle/kv/impl/util/UserDataControl*.class,
                     oracle/kv/impl/util/WaitableCounter*.class,
                     oracle/kv/impl/util/client/*.class,
                     oracle/kv/impl/util/registry/*.class,
                     oracle/kv/impl/util/registry/ssl/*.class,
                     oracle/kv/impl/util/sklogger/*.class,
                     oracle/kv/impl/util/contextlogger/*.class,
                     oracle/kv/stats/*.class,
                     oracle/kv/util/*.class">
    <exclude name="oracle/kv/coherence/*.class"/>
    <exclude name="oracle/kv/coherence/pof/*.class"/>
    <exclude name="oracle/kv/impl/api/AsyncRequestHandlerResponder*.class"/>
    <exclude name="oracle/kv/impl/api/RequestHandlerImpl*.class"/>
    <exclude name="oracle/kv/impl/api/ops/*Handler*.class"/>
    <exclude name="oracle/kv/impl/api/ops/IndexScanner*.class"/>
    <exclude name="oracle/kv/impl/api/ops/MultiGetBatchExecutor*.class"/>
    <exclude name="oracle/kv/impl/api/ops/Scanner*.class"/>
    <exclude name="oracle/kv/impl/async/AsyncVersionedRemoteDialogResponder*.class"/>
    <exclude name="oracle/kv/impl/async/AsyncVersionedRemoteDialogResultHandler*.class"/>
    <exclude name="oracle/kv/impl/async/ListenerConfig*.class"/>
    <exclude name="oracle/kv/impl/async/registry/ServiceRegistryImpl*.class"/>
    <exclude name="oracle/kv/impl/async/registry/ServiceRegistryResponder*.class"/>
    <exclude name="oracle/kv/impl/topo/Datacenter$ServerUtil*.class"/>
    <exclude name="oracle/kv/impl/topo/TopologyServerUtil*.class"/>
    <exclude name="oracle/kv/impl/util/registry/ssl/SSLServerSocketFactory*.class"/>
    <exclude name="oracle/kv/impl/util/registry/ssl/SSLServerSocketPolicy*.class"/>
  </fileset>

  <!-- Classes from the kv tree required for the coherence jar file -->
  <fileset id="kvcoherenceclasses" dir="${destdir}"
           includes="oracle/kv/coherence/*.class,
                     oracle/kv/coherence/pof/*.class"/>

  <!-- This fileset is not currently used.  In the future it may be -->
  <!-- used to separate CLI classes from kvstore.jar.  This will -->
  <!-- require a remote administrative client interface. -->
  <!-- Classes from the kv tree required for the cli jar file -->
  <fileset id="kvcliclasses" dir="${destdir}"
           includes="oracle/kv/shell/*.class,
                     oracle/kv/impl/admin/client/*.class,
                     oracle/kv/util/shell/*.class,
                     oracle/kv/impl/util/CommandParser.class,
                     oracle/kv/impl/security/util/KVStoreLogin.class,
                     oracle/kv/impl/util/FileUtils.class"/>

  <!-- Classes from the kv tree required for the sql cli jar file -->
  <fileset id="sqlclasses" dir="${destdir}"
           includes="oracle/kv/impl/query/shell/*.class,
                     oracle/kv/impl/query/shell/output/*.class,
                     oracle/kv/util/shell/*.class,
                     oracle/kv/impl/security/util/PasswordReader.class,
                     oracle/kv/impl/security/PasswordExpiredException.class,
                     oracle/kv/impl/util/CommandParser.class"/>

  <fileset id="resources"
           dir="${rscdir}"
           excludes="**/*.sql"/>

  <fileset id="resources-ee"
           dir="${rscdir}"
           includes="**/*.sql"/>

  <fileset id="kvclientresources"
           dir="${rscdir}"
           includes="**/build.properties"/>

  <fileset id="jarrable_messages" dir="${destdir}"
           includes="**/*messages*.properties"/>

  <path id="checkstyle.classpath">
    <fileset dir="${extlibdir}"
             includes="checkstyle.jar, antlr.jar, guava.jar,
                       commons-beanutils-core.jar, commons-cli.jar,
                       commons-logging.jar"/>
  </path>

  <path id="findbugs.classpath">
    <fileset dir="${extlibdir}"
             includes="findbugs.jar, annotations.jar, bcel.jar,
                       jFormatString.jar, jsr305.jar, asm.jar, asm-commons.jar,
                       asm-tree.jar, commons-lang.jar, dom4j.jar, jaxen.jar"/>
  </path>

  <!-- ============================================================ -->
  <!-- Targets                                                      -->
  <!-- ============================================================ -->

  <target name="check-java-version">
    <fail message="Using Java ${ant.java.version}, but version must match:
${jdk.allowed.versions}">
      <condition>
        <not>
          <matches pattern="${jdk.allowed.versions}"
                   string="${ant.java.version}"/>
        </not>
      </condition>
    </fail>
  </target>

  <target name="identify-environment" depends="check-java-version">
    <echo message="Java Version: ${java.version}"/>
    <echo message="Source Java Version: ${jdk.source.version}"/>
    <echo message="Target Java Version: ${jdk.target.version}"/>
    <echo message="Target Client Java Version: ${jdk.client.version}"/>
    <echo message="Java Runtime: ${java.runtime.name} (${java.runtime.version})"/>
    <echo message="Java VM: ${java.vm.name} (${java.vm.version})"/>
    <echo message="Operating System: ${os.name} (${os.version})"/>
  </target>

  <target name="dep-dirs" depends="identify-environment">
    <mkdir dir="${clover.tmpdir}"/>
    <mkdir dir="${destdir}"/>
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.exttabbindir}"/>
    <mkdir dir="${dist.exampledir}"/>
    <mkdir dir="${dist.libdir}"/>
    <mkdir dir="${dist.destdir}"/>
    <mkdir dir="${example.destdir}"/>
    <mkdir dir="${test.destdir}"/>
    <mkdir dir="${test.resultsdir}"/>
    <mkdir dir="${test.kvsandbox}"/>
    <mkdir dir="${standalone.destdir}"/>
    <mkdir dir="${exttab.rscdir}"/>
    <mkdir dir="${version.rscdir}"/>
  </target>

  <!-- ============================================================  -->
  <!-- Ivy targets used to manage external dependencies.  The ivy    -->
  <!-- repository is on                                              -->
  <!-- sleepycat-scm.us.oracle.com in /a/kv_repo/ivy.                -->
  <!-- Requires 3 settings                                           -->
  <!--   1.  username on sleepycat-scm (defaults to current user)    -->
  <!--   2.  path to an ssh keyfile for sleepycat-scm.               -->
  <!--       Defaults to $HOME/.ssh/id_dsa                           -->
  <!--   3.  pass phrase for the keyfile.  This is optional but      -->
  <!--       Ivy requires something.  It has no default.             -->
  <!-- The necessary configuration can be overridden on the ant      -->
  <!-- command line or in a $HOME/.antrc file.  The former:          -->
  <!-- ant -Divy.user=user -Divy.keyfile=path -Divy.keypassword=pass -->
  <!-- The latter, in $HOME/.antrc:                                  -->
  <!-- ANT_OPTS="-Divy.user=user -Divy.keyfile=path \                -->
  <!--           -Divy.keypassword=passphrase"                       -->
  <!-- If you have no passphrase on your keyfile, use "" as the      -->
  <!-- passphrase.                                                   -->
  <!--                                                               -->
  <!-- See updatelibs.xml for information on updating or changing    -->
  <!-- the library dependencies.                                     -->
  <!-- ============================================================  -->

  <!-- handles username/keyfile and is shared with updatelibs.xml -->
  <import file="ivy.include.xml" as="KV"/>

  <target name="can-we-skip-libs"
          description="--> only retrieve libraries if something has changed">
    <!-- retrieve if the directory doesn't exist or if ivy.xml has -->
    <!-- changed more recently than the external library directory -->
    <condition property="do-retrieve">
      <or>
        <not>
          <available file="${extlibdir}"/>
        </not>
        <uptodate targetfile="ivy.xml">
          <srcresources>
            <dirset dir="${extlibdir}"/>
          </srcresources>
        </uptodate>
      </or>
    </condition>
  </target>

  <!-- user-callable targets - resolve, clean, clean-cache -->
  <target name="ivy-resolve"
          description="--> retrieve dependencies with ivy"
          depends="dep-dirs,can-we-skip-libs"
          if="do-retrieve">
    <antcall target="do-keyfile"/>
  </target>

  <target name="ivy-clean-cache"
          description="--> clean the ivy cache">
    <!-- set a dummy property to allow ivysettings.xml to parse correctly -->
    <property name="ivy.keyfile" value="/xyz"/>
    <ivy:cleancache />
  </target>

  <target name="ivy-clean"
          description="--> remove the external libraries and directory">
    <delete includeemptydirs="true">
      <fileset dir="${extlibdir}"/>
    </delete>
  </target>

  <!-- Include dependencies for the internal configuration for internal
       builds, but just ones with the default configuration for public
       builds -->
  <condition property="ivy.conf"
             value="default,publicBuild"
             else="publicBuild">
    <isset property="internal.build"/>
  </condition>

  <!-- Use different Ivy settings for public and internal builds -->
  <condition property="ivy.settings.file"
             value="ivysettingsinternal.xml"
             else="ivysettings.xml">
    <isset property="internal.build"/>
  </condition>

  <!-- do-keyfile should not be called directly -->
  <target name="do-keyfile"
          depends="get-user, default-keyfile, set-keyfile, get-keyfile, check-keyfile"
          if="do-retrieve">
    <!-- if we get this far the libraries will be retrieved -->
    <ivy:retrieve
        pattern="${extlibdir}/[artifact](-[classifier]).[ext]"
        type="jar,bundle" transitive="false" conf="${ivy.conf}"/>
    <!-- update extlibdir to prevent unnecessary retrieval -->
    <touch>
      <fileset file="${extlibdir}"/>
    </touch>
  </target>

  <!-- ============================================================ -->
  <!-- Compile targets                                              -->
  <!-- ============================================================ -->

  <target name="compile" depends="compile-src,
                                  compile-test"/>

  <target name="gen-messages" depends="get-boot-classpath, dep-dirs"
          if="internal.build">
    <javac
      srcdir="${srcdir}"
      destdir="${destdir}"
      includeantruntime="true"
      debug="${build.debug}"
      deprecation="${build.deprecation}"
      optimize="on"
      source="${jdk.source.version}"
      target="${jdk.target.version}"
      bootclasspath="${jdk.boot.class.path}"
      classpathref="src.classpath"
      failonerror="true">
      <include name="oracle/kv/util/MessageFileProcessor.java"/>
    </javac>

    <java classname="oracle.kv.util.MessageFileProcessor" failonerror="true">
      <arg value="-d"/>
      <arg value="${basedir}"/>
      <classpath>
        <pathelement location="${destdir}"/>
        <pathelement path="${java.class.path}"/>
        <pathelement path="${clover.classpath}"/>
      </classpath>
    </java>
  </target>

  <target name="compile-print-boot-class-path" depends="dep-dirs"
          if="internal.build">
    <javac srcdir="${miscdir}"
           includes="PrintBootClassPath.java"
           destdir="${dist.destdir}"
           includeantruntime="false"
           debug="${build.debug}"
           source="${jdk.client.version}"
           target="${jdk.client.version}"
           classpathref="misc.class.path">
      <!-- Ignore boot classpath warnings -->
      <compilerarg value="-Xlint:-options"/>
    </javac>
  </target>

  <!-- Set the value of the jdk.boot.class.path property to the value of
       the boot classpath in the Java installation specified by the
       jdk8.home property, if any.  If the jdk8.home property is set,
       the boot classpath value will be used by the javac and javadoc
       tools to check that only Java 8 APIs are being used.  If the
       jdk8.home property is not set, the default boot classpath will be
       used.  In that case, if the build is not being done with Java 8,
       the tools will generate warnings about the missing boot classpath
       setting, and calls to more recent APIs will not be flagged, but
       the compiler will still enforce Java 8 language rules. -->
  <target name="get-boot-classpath"
          depends="maybe-warn-set-jdk8-home, compile-print-boot-class-path"
          if="internal.build.jdk8.home">
    <java fork="yes"
          jvm="${jdk8.home}/bin/java"
          failonerror="true"
          classname="PrintBootClassPath"
          classpathref="dist.classpath"
          outputproperty="jdk.boot.class.path">
      <classpath refid="dist.classpath"/>
      <classpath refid="jacoco.classpath"/>
      <classpath refid="clover.classpath"/>
    </java>
  </target>

  <!-- Get Java 8 boot classpath for client compiles -->
  <target name="get-client-boot-classpath"
          depends="maybe-warn-set-jdk8-home, compile-print-boot-class-path"
          if="internal.build.jdk8.home">
    <java fork="yes"
          jvm="${jdk8.home}/bin/java"
          failonerror="true"
          classname="PrintBootClassPath"
          outputproperty="jdk.client.boot.class.path">
      <classpath refid="dist.classpath"/>
      <classpath refid="jacoco.classpath"/>
      <classpath refid="clover.classpath"/>
    </java>
  </target>

  <!-- Print a warning message if jdk8.home needs to be set -->
  <target name="maybe-warn-set-jdk8-home"
          depends="check-need-jdk8-home"
          if="warn.set.jdk8.home">
    <echo message="warning: The jdk8.home property is not set, not checking
Java 8 compatibility"/>
  </target>

  <target name="check-need-jdk8-home">
    <condition property="warn.set.jdk8.home">
      <and>
        <not><isset property="using.jdk8"/></not>
        <not><isset property="jdk8.home"/></not>
      </and>
    </condition>
  </target>

  <target name="compile-src" depends="compile-src-client"/>

  <target name="compile-src-server"
          depends="ivy-resolve, gen-messages,
                   get-client-boot-classpath">

    <!-- Ignore wallet files and Object Store Export/Import files for
         public builds because their dependencies are not public -->
    <condition property="compile.src.excludes"
               value=""
               else="**/security/wallet/*,
                     **/util/expimp/ObjectStoreExport*,
                     **/util/expimp/ObjectStoreImport*,
                     **/util/expimp/ObjectStoreFactoryImpl*">
      <isset property="internal.build"/>
    </condition>
    <echo message="Compiling all classes with Java source version
${jdk.source.version} and Java target version ${jdk.target.version}"/>
    <javac
       srcdir="${srcdir}"
       destdir="${destdir}"
       includeantruntime="true"
       debug="${build.debug}"
       deprecation="${build.deprecation}"
       optimize="on"
       source="${jdk.source.version}"
       target="${jdk.target.version}"
       bootclasspath="${jdk.boot.class.path}"
       classpathref="src.classpath"
       excludes="${compile.src.excludes}">
        <!--
        <compilerarg value="-Xlint:unchecked"/>
        -->
    </javac>
  </target>

  <target name="compile-src-client" depends="compile-src-server"
          if="${check.client.version}">

    <!-- Compute files that need to be recompiled -->
    <pathconvert property="kvclientclasses.compile"
                 pathsep="${line.separator}">
        <fileset refid="kvclientclasses"/>
    </pathconvert>
    <echo message="${kvclientclasses.compile}"
          file="${tmpdir}/kvclientclasses"/>
    <exec executable="python"
          input="${tmpdir}/kvclientclasses"
          outputproperty="delete.classes"
          failonerror="true"
          logerror="true">
        <arg value="misc/check-java-classfile-version"/>
        <arg value="-f"/>
        <arg value="${jdk.client.max.classfile.version}"/>
    </exec>

    <!-- Delete files with wrong version and recompile -->
    <delete>
      <filelist dir="${destdir}" files="${delete.classes}"/>
    </delete>

    <echo message="Compiling client classes with Java version
${jdk.client.version}"/>
    <javac
       srcdir="${srcdir}"
       destdir="${destdir}"
       includeantruntime="true"
       debug="${build.debug}"
       deprecation="${build.deprecation}"
       optimize="on"
       source="${jdk.client.version}"
       target="${jdk.client.version}"
       bootclasspath="${jdk.client.boot.class.path}"
       classpathref="src.classpath"
       excludes="${compile.src.excludes}">
        <!--
        <compilerarg value="-Xlint:unchecked"/>
        -->
    </javac>
  </target>

  <target name="compile-examples" depends="jar,jar-ee,dep-dirs">

    <!-- Ignore external tables examples for public builds because their
         dependencies are not public -->
    <condition property="compile.examples.excludes"
               value=""
               else="**/externaltables/**/*">
      <isset property="internal.build"/>
    </condition>
    <javac
       srcdir="${example.srcdir}"
       destdir="${example.destdir}"
       includeantruntime="true"
       debug="${build.debug}"
       deprecation="${build.deprecation}"
       optimize="on"
       source="${jdk.source.version}"
       target="${jdk.target.version}"
       bootclasspath="${jdk.boot.class.path}"
       classpathref="examples.classpath"
       excludes="${compile.examples.excludes}">
        <!--
        <compilerarg value="-Xlint:unchecked"/>
        -->
    </javac>
    <copy todir="${example.destdir}/table"
        file="${example.srcdir}/table/person_contacts.json"/>
  </target>

  <target name="copy-sql-resources" depends="dep-dirs" if="internal.build">
    <copy todir="${exttab.rscdir}">
      <fileset dir="${exttab.sqlsrc}"/>
    </copy>
  </target>

  <target name="copy-version-resource" depends="dep-dirs">
    <copy todir="${version.rscdir}">
      <fileset dir="${dist.destdir}" includes="build.properties"/>
    </copy>
  </target>

  <target name="compile-test" depends="compile-test-client"/>

  <target name="compile-test-server"
          depends="jar,jar-ee,dep-dirs,compile-examples">
    <echo message="Compiling all test classes with Java source version
${jdk.source.version} and Java target version ${jdk.target.version}"/>
    <javac
       sourcepath=""
       srcdir="${test.srcdir}"
       excludes="oracle/kv/release/**,release/**"
       destdir="${test.destdir}"
       includeantruntime="true"
       debug="${build.debug}"
       deprecation="${build.deprecation}"
       optimize="on"
       source="${jdk.source.version}"
       target="${jdk.target.version}"
       bootclasspath="${jdk.boot.class.path}"
       classpathref="test.classpath">
        <!--
        <compilerarg value="-Xlint:unchecked"/>
        -->
        <exclude name="${test.srcdir}/query/src/**"/>
    </javac>
    <javac
        srcdir="${test.srcdir}/query/src/"
        destdir="${test.destdir}"
        includeantruntime="true"
        debug="${build.debug}"
        deprecation="${build.deprecation}"
        optimize="on"
        source="${jdk.source.version}"
        target="${jdk.target.version}"
        bootclasspath="${jdk.boot.class.path}"
        classpathref="test.classpath">
    </javac>
  </target>

  <target name="compile-test-client"
          depends="compile-test-server, show-test-client-excludes"
          if="${check.client.version}">

    <!-- Compute files that need to be recompiled -->
    <pathconvert property="clienttestclasses.names"
                 pathsep="${line.separator}">
        <fileset dir="${test.destdir}" excludes="${skip}">
            <patternset refid="clientTestClasses"/>
        </fileset>
        <fileset refid="additionalClientTestClasses"/>
    </pathconvert>
    <echo message="${clienttestclasses.names}"
          file="${tmpdir}/clienttestclasses"/>
    <exec executable="python"
          input="${tmpdir}/clienttestclasses"
          outputproperty="delete.test.classes"
          failonerror="true"
          logerror="true">
        <arg value="misc/check-java-classfile-version"/>
        <arg value="-f"/>
        <arg value="${jdk.client.max.classfile.version}"/>
    </exec>

    <!-- Delete files with wrong version and recompile -->
    <delete>
      <filelist dir="${test.destdir}" files="${delete.test.classes}"/>
    </delete>

    <echo message="Compiling client test classes with Java version
${jdk.client.version}"/>
    <javac
       srcdir="${test.srcdir}"
       excludes="oracle/kv/release/** release/** ${test.client.excludes}"
       destdir="${test.destdir}"
       includeantruntime="true"
       debug="${build.debug}"
       deprecation="${build.deprecation}"
       optimize="on"
       source="${jdk.client.version}"
       target="${jdk.client.version}"
       bootclasspath="${jdk.client.boot.class.path}"
       classpathref="test.classpath">
        <!--
        <compilerarg value="-Xlint:unchecked"/>
        -->
    </javac>

  </target>

  <target name="show-test-client-excludes"
          if="${show.test.client.excludes}">
    <echo message="Exclude From compile-test-client: ${test.client.excludes}"/>
  </target>

  <target name="kv-version" depends="compile-src">
    <java fork="yes"
          classname="oracle.kv.KVVersion"
          outputproperty="version.result"
          failonerror="false">
      <classpath refid="misc.class.path"/>
      <classpath refid="clover.classpath"/>
    </java>
  </target>

  <target name="copy-message-files" if="internal.build">
    <copy todir="${destdir}">
    <fileset dir="${msgs_src_dir}" includes="**/messages*.properties"/>
    </copy>
    <!-- Copy messages.properties to messages_en_us.properties -->
    <copy file="${msgs_src_dir}/${msg_file_name}"
          tofile="${destdir}/${msg_file_name_us}"/>
  </target>

  <!-- Generate the table ddl parser code -->
  <!-- This target is not a dependency for any other target.  If the
       grammar file (Table.g) changes this target must be run
       manually.  The generated code will likely generate warnings in
       Eclipse, so they should be fixed before being pushed -->
  <target name="generate-parser" description="Generate parsers from ANTLR grammars">
    <java jar="${antlr.classpath}" fork="true" failonerror="true">
      <arg value="-package"/>
      <arg value="oracle.kv.impl.query.compiler.parser"/>
      <arg value="-no-visitor"/>
      <arg value="-Werror"/>
      <arg value="${KVSQL.grammar}" />
    </java>
  </target>

  <target name="jar"
          depends="compile-src,kv-version,update-version,
                   copy-version-resource,kvclientjar,kvcoherencejar,kvclijar,
                   sqljar,copy-message-files, copy-sql-resources,
                   default-ee,kvtooljar">
    <delete failonerror="false" file="${jarfile}" />
    <propertyfile file="${version.rscdir}/build.properties">
      <entry key="release.edition" value="${release.edition}"/>
    </propertyfile>
    <jar jarfile="${jarfile}">
        <fileset refid="jarclasses"/>
        <fileset refid="resources"/>
        <fileset refid="jarrable_messages"/>
        <manifest>
            <attribute name="Class-Path"
                       value="${jar.dependencies} ${kvstore.ee.ref}"/>
            <attribute name="Main-Class"
                       value="oracle.kv.impl.util.KVStoreMain"/>
            <attribute name="Implementation-Title"
                       value="Oracle NoSQL Database"/>
            <attribute name="Implementation-Version"
                       value="${version.result}"/>
            <attribute name="Implementation-Vendor"
                       value="Oracle"/>
            <attribute name="Implementation-URL"
                       value="http://www.oracle.com/"/>
            <attribute name="Build-Date"
                       value="${release.date}"/>
            <attribute name="Build-Id"
                       value="${release.id}"/>
            <attribute name="Build-Edition"
                       value="${release.edition}"/>
        </manifest>
    </jar>
  </target>

  <target name="kvtooljar"
          depends="compile-src,kv-version,update-version" if="internal.build">
    <delete failonerror="false" file="${kvtooljarfile}" />
    <jar jarfile="${kvtooljarfile}">
        <fileset refid="kvtooljarclasses"/>
        <manifest>
            <attribute name="Class-Path"
                       value="${kvtooljar.dependencies}"/>
            <attribute name="Main-Class"
                       value="oracle.kv.impl.util.KVToolMain"/>
            <attribute name="Implementation-Title"
                       value="Oracle NoSQL Database"/>
            <attribute name="Implementation-Version"
                       value="${version.result}"/>
            <attribute name="Implementation-Vendor"
                       value="Oracle"/>
            <attribute name="Implementation-URL"
                       value="http://www.oracle.com/"/>
            <attribute name="Build-Date"
                       value="${release.date}"/>
            <attribute name="Build-Id"
                       value="${release.id}"/>
        </manifest>
    </jar>
  </target>

  <target name="jar-ee" depends="jar">
    <delete failonerror="false" file="${jareefile}" />
    <jar jarfile="${jareefile}">
        <fileset refid="jareeclasses"/>
        <fileset refid="resources-ee"/>
        <manifest>
            <attribute name="Class-Path"
                       value="${jaree.dependencies}"/>
            <attribute name="Implementation-Title"
                       value="Oracle NoSQL Database Enterprise Edition"/>
            <attribute name="Implementation-Version"
                       value="${version.result}"/>
            <attribute name="Implementation-Vendor"
                       value="Oracle"/>
            <attribute name="Implementation-URL"
                       value="http://www.oracle.com/"/>
            <attribute name="Build-Date"
                       value="${release.date}"/>
            <attribute name="Build-Id"
                       value="${release.id}"/>
        </manifest>
    </jar>
  </target>

  <target name="testjar" depends="compile-test,kv-version,update-version">
    <jar jarfile="${testjarfile}">
        <fileset refid="testclasses"/>
        <fileset refid="testresources"/>
        <manifest>
            <attribute name="Class-Path"
                       value="${testjar.dependencies}"/>
            <attribute name="Main-Class"
                       value="oracle.kv.impl.util.KVStoreMain"/>
            <attribute name="Implementation-Title"
                       value="Oracle NoSQL Database"/>
            <attribute name="Implementation-Version"
                       value="${version.result}"/>
            <attribute name="Implementation-Vendor"
                       value="Oracle"/>
            <attribute name="Implementation-URL"
                       value="http://www.oracle.com/"/>
            <attribute name="Build-Date"
                       value="${release.date}"/>
            <attribute name="Build-Id"
                       value="${release.id}"/>
        </manifest>
    </jar>
  </target>

  <target name="kvclientjar"
          depends="compile-src, unjarje, check-je-class-versions,
                   check-kv-class-versions, kv-version, update-version">
    <propertyfile file="${version.rscdir}/build.properties">
      <entry key="release.edition" value="Client"/>
    </propertyfile>
    <jar jarfile="${kvclientjarfile}">
        <fileset refid="kvclientclasses"/>
        <fileset refid="jeclientclasses"/>
        <fileset refid="kvclientresources"/>
        <manifest>
            <attribute name="Class-Path"
                       value="${clientjar.dependencies}"/>
            <attribute name="Main-Class"
                       value="oracle.kv.KVVersion"/>
            <attribute name="Implementation-Title"
                       value="Oracle NoSQL Database"/>
            <attribute name="Implementation-Version"
                       value="${version.result}"/>
            <attribute name="Implementation-Vendor"
                       value="Oracle"/>
            <attribute name="Implementation-URL"
                       value="http://www.oracle.com/"/>
            <attribute name="Build-Date"
                       value="${release.date}"/>
            <attribute name="Build-Id"
                       value="${release.id}"/>
            <attribute name="Build-Edition"
                       value="Client"/>
        </manifest>
    </jar>
  </target>

  <target name="kvcoherencejar"
          depends="compile-src,kv-version,update-version">
    <delete failonerror="false" file="${kvcoherencejarfile}" />
    <jar jarfile="${kvcoherencejarfile}">
        <fileset refid="kvcoherenceclasses"/>
        <manifest>
            <attribute name="Class-Path"
                       value="${coherencejar.dependencies}"/>
            <attribute name="Implementation-Title"
                       value="Oracle NoSQL Database Coherence Support"/>
            <attribute name="Implementation-Version"
                       value="${version.result}"/>
            <attribute name="Implementation-Vendor"
                       value="Oracle"/>
            <attribute name="Implementation-URL"
                       value="http://www.oracle.com/"/>
            <attribute name="Build-Date"
                       value="${release.date}"/>
            <attribute name="Build-Id"
                       value="${release.id}"/>
        </manifest>
    </jar>
  </target>

  <target name="kvclijar" depends="compile-src,kv-version,update-version">
    <delete failonerror="false" file="${kvclijarfile}" />
    <jar jarfile="${kvclijarfile}">
        <!-- This is currently an empty jar that calls into kvstore.jar -->
        <!-- In the future the CLI classes may move back here so it's a -->
	<!-- placeholder for that.  It's also compatibility with the R2 -->
	<!-- data CLI which expects kvcli.jar.  If done the classes in -->
	<!-- kvcliclasses must be excluded from kvstore.jar -->
        <!--<fileset refid="kvcliclasses"/>-->
        <manifest>
            <attribute name="Class-Path"
                       value="${clijar.dependencies}"/>
            <attribute name="Main-Class"
                       value="oracle.kv.impl.admin.client.CommandShell"/>
            <attribute name="Implementation-Title"
                       value="Oracle NoSQL Database Command Line Interface"/>
            <attribute name="Implementation-Version"
                       value="${version.result}"/>
            <attribute name="Implementation-Vendor"
                       value="Oracle"/>
            <attribute name="Implementation-URL"
                       value="http://www.oracle.com/"/>
            <attribute name="Build-Date"
                       value="${release.date}"/>
            <attribute name="Build-Id"
                       value="${release.id}"/>
        </manifest>
    </jar>
  </target>

  <target name="sqljar" depends="compile-src,kv-version,update-version">
    <delete failonerror="false" file="${sqljarfile}" />
    <jar jarfile="${sqljarfile}">
        <fileset refid="sqlclasses"/>
        <manifest>
            <attribute name="Class-Path"
                       value="${sqljar.dependencies}"/>
            <attribute name="Main-Class"
                       value="oracle.kv.impl.query.shell.OnqlShell"/>
            <attribute name="Implementation-Title"
                       value="Oracle NoSQL Database SQL Shell Interface"/>
            <attribute name="Implementation-Version"
                       value="${version.result}"/>
            <attribute name="Implementation-Vendor"
                       value="Oracle"/>
            <attribute name="Implementation-URL"
                       value="http://www.oracle.com/"/>
            <attribute name="Build-Date"
                       value="${release.date}"/>
            <attribute name="Build-Id"
                       value="${release.id}"/>
        </manifest>
    </jar>
  </target>

  <!-- Pull selected JE classes from je.jar for kvclient.jar -->
  <target name="unjarje">

    <!-- Get the JE JAR from the lib directory for public builds -->
    <condition property="jejar"
               value="${extlibdir}/je.jar"
               else="${libdir}/je.jar">
      <isset property="internal.build"/>
    </condition>

    <unjar src="${jejar}" dest="${destdir}">
      <patternset>
        <include name="**/*.class"/>
      </patternset>
    </unjar>
  </target>

  <!-- Check that the JE classes used for kvclient.jar do not exceed the
       maximum Java class file version -->
  <target name="check-je-class-versions"
          depends="unjarje"
          if="${check.client.version}">
    <pathconvert property="jeclientclasses.names"
                 pathsep="${line.separator}">
      <fileset refid="jeclientclasses"/>
    </pathconvert>
    <echo message="${jeclientclasses.names}"
          file="${tmpdir}/jeclientclasses"/>
    <exec executable="python"
          input="${tmpdir}/jeclientclasses"
          failonerror="true">
        <arg value="misc/check-java-classfile-version"/>
        <arg value="${jdk.client.max.classfile.version}"/>
    </exec>
  </target>

  <!-- Check that the KV classes used for kvclient.jar do not exceed the
       maximum Java class file version -->
  <target name="check-kv-class-versions"
          depends="compile-src"
          if="${check.client.version}">
    <pathconvert property="kvclientclasses.check"
                 pathsep="${line.separator}">
      <fileset refid="kvclientclasses"/>
    </pathconvert>
    <echo message="${kvclientclasses.check}"
          file="${tmpdir}/kvclientclasses"/>
    <exec executable="python"
          input="${tmpdir}/kvclientclasses"
          failonerror="true">
        <arg value="misc/check-java-classfile-version"/>
        <arg value="${jdk.client.max.classfile.version}"/>
    </exec>
  </target>

  <target name="copyjar" depends="jar,testjar">
    <copy todir="${dist.libdir}" flatten="true">
      <fileset refid="libraries.package"/>
      <fileset refid="libraries.junit"/>
    </copy>
  </target>

  <target name="copyjar-ee" depends="jar,jar-ee,testjar">
    <copy todir="${dist.libdir}" flatten="true">
      <fileset refid="libraries.package-ee"/>
      <fileset refid="libraries.junit"/>
    </copy>
  </target>

  <!-- NOTE: the chmod calls below are "undone" by the zip tool.
       This may eventually be fixed in ant/zip but until then the
       actual packaging needs to be sure to do an explicit chmod as well -->
  <target name="copybin">
    <copy todir="${dist.exttabbindir}" flatten="true">
      <fileset dir="${exttabbindir}">
        <include name="nosql_stream"/>
      </fileset>
    </copy>
    <chmod file="${dist.exttabbindir}/nosql_stream" perm="ugo+rx"/>
  </target>

  <target name="is-emplug-opar-set">
    <condition property="emplug-opar-is-set">
      <isset property="emplug.opar"/>
    </condition>
  </target>

  <target name="warn-unless-emplug-opar-is-set"
	  depends="is-emplug-opar-set"
	  unless="emplug-opar-is-set">
    <echo message="warning: Not including EM plug-in because emplug.opar is not set"/>
  </target>

  <target name="copy-emplug-opar"
	  if="emplug-opar-is-set"
	  depends="warn-unless-emplug-opar-is-set">
    <copy file="${emplug.opar}" todir="${dist.libdir}"/>
  </target>

  <target name="copyexamples" depends="compile-examples">
    <copy overwrite="true" todir="${dist.exampledir}">
      <fileset dir="${example.srcdir}">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <target name="build" depends="jar"/>

  <target name="rebuild" depends="clean,jar"/>

  <target name="build-all" depends="copyjar,copyjar-ee,copybin,copyexamples"/>

  <target name="rebuild-all" depends="clean,build-all"/>

  <!-- ============================================================ -->
  <!-- Clean targets                                                -->
  <!-- ============================================================ -->

  <target name="clean" depends="dep-dirs, clean-src,
                                clean-test, clean-examples, clean-dist,
                                clover-clean, jacoco-clean, clean-msgs,
                                clean-sql, clean-version, clean-rpms,
                                clean-tmp"/>

  <target name="clean-src">
    <delete>
      <fileset dir="${destdir}"
               includes="**/*.class, **/messages*.properties"/>
    </delete>
  </target>

  <target name="clean-msgs">
    <delete>
      <fileset dir="${destdir}"
               includes="**/messages*.properties"/>
      </delete>
  </target>

  <target name="clean-sql">
    <delete>
      <fileset dir="${exttab.rscdir}"/>
    </delete>
  </target>

  <target name="clean-version">
    <delete>
      <fileset dir="${version.rscdir}"/>
      <fileset dir="${dist.destdir}"
               includes="build.properties, **/*.class"/>
      <fileset dir="${destdir}"
               includes="oracle/kv/KVVersion.class"/>
    </delete>
  </target>

  <target name="clean-test">
    <delete>
      <fileset dir="${test.destdir}"
               includes="**/*.class"/>
      <fileset dir="${test.resultsdir}"
               includes="**/*"/>
    </delete>
    <delete dir="${test.failurecopydir}"/>
  </target>

  <target name="clean-examples">
    <delete>
      <fileset dir="${example.destdir}"
               includes="**/*.class"/>
    </delete>
  </target>

  <target name="clean-dist">
    <delete dir="${dist.dir}"/>
    <delete file="${zipfile-ce}"/>
    <delete file="${zipfile-ee}"/>
    <delete file="${zipfile-be}"/>
    <delete file="${zipfile-client}"/>
    <delete file="${zipfile-examples}"/>
    <delete file="${zipfile-test}"/>
    <delete file="${zipfile-docs}"/>
  </target>

  <target name="clean-rpms">
    <delete dir="${rpmbuilddir}"/>
  </target>

  <target name="clean-tmp">
    <delete dir="${tmpdir}"/>
  </target>

  <target name="clean-javadoc-tmp">
    <delete dir="${javadoc.tmpdir}"/>
  </target>

  <!-- ============================================================ -->
  <!-- Unit testing                                                 -->
  <!-- ============================================================ -->

  <property name="timeout" value="3600000"/>

  <!-- Tests to be run with kvclient.jar -->
  <patternset id="clientTestClasses">
    <include name="oracle/kv/KeyTest.class"/>
    <include name="oracle/kv/OtherSerializationTest.class"/>
    <include name="oracle/kv/ValueTest.class"/>
    <include name="oracle/kv/VersionTest.class"/>
    <include name="oracle/kv/impl/api/StatsTest.class"/>
    <include name="oracle/kv/impl/api/avro/*Test.class"/>
    <include name="oracle/kv/impl/api/ops/*Test.class"/>
    <include name="oracle/kv/hadoop/*Test.class"/>
    <include name="oracle/kv/table/ClientDDLTest.class"/>
    <include name="oracle/kv/table/ClientTableAPITest.class"/>
    <include name="oracle/kv/query/*Test.class"/>
  </patternset>

  <!-- Additional test classes needed to run client tests -->
  <fileset id="additionalClientTestClasses" dir="${test.destdir}"
           includes="oracle/kv/StaticClientTestBase*.class
                     oracle/kv/TestBase*.class
                     oracle/kv/impl/api/avro/*.class
                     oracle/kv/impl/api/ops/*.class
                     oracle/kv/impl/util/TestUtils*.class"/>

  <!-- Tests to be run with kvcoherence.jar -->
  <patternset id="coherenceTestClasses">
    <include name="oracle/kv/coherence/*Test.class"/>
  </patternset>

  <target name="testcase">
    <condition property="alltests">
      <not>
        <!-- Set the testcase property to a fully qualified test class
             name to run a single test and, if desired, set
             testcase.methods to a comma-separated list of specific
             methods -->
        <isset property="testcase"/>
      </not>
    </condition>
    <condition property="testcase-all-methods">
      <and>
        <isset property="testcase"/>
        <not>
          <isset property="testcase.methods"/>
        </not>
      </and>
    </condition>
    <condition property="testcase-specific-methods">
      <and>
        <isset property="testcase"/>
        <isset property="testcase.methods"/>
      </and>
    </condition>
  </target>

  <!-- Compute testpackage.dir from testpackage, if set -->
  <target name="transform-testpackage" if="testpackage">
    <loadresource property="testpackage.dir">
      <propertyresource name="testpackage"/>
      <filterchain>
        <tokenfilter>
          <replacestring from="." to="/"/>
        </tokenfilter>
      </filterchain>
    </loadresource>
  </target>

  <!-- Setting the testpackage property on the command line will limit
       unit tests to those in the specified package.
       (e.g. -Dtestpackage=oracle.kv.impl.sna) -->
  <target name="testpackage" depends="transform-testpackage">
    <!-- This is a No-op if property is already set -->
    <property name="testpackage.dir" value=""/>

    <!-- Define properties that, by default, filter the various test
         sets by package, but can provide more specific filtering if set
         by the user.  Each one should be set to one or more patterns
         that represent the relative pathnames for .class files. -->
    <property name="test.includes"
              value="${testpackage.dir}**/*Test.class
                     ${testpackage.dir}**/*TestJUnit.class"/>
    <property name="testclient.includes"
              value="${testpackage.dir}**/*Test.class
                     ${testpackage.dir}**/*TestJUnit.class"/>
    <property name="testcoherence.includes"
              value="${testpackage.dir}**/*Test.class
                     ${testpackage.dir}**/*TestJUnit.class"/>
  </target>

  <!-- Set the oracle.kv.jvm.extraargs property, if needed -->
  <target name="extraargs">
    <condition property="oracle.kv.jvm.extraargs"
               value="${jacoco.jvm.extraargs}">
      <isset property="jacoco.jvm.extraargs"/>
    </condition>
  </target>


  <target name="testprops" depends="testcase,extraargs,testpackage"/>

  <!-- Run all the unit tests -->
  <target name="test"
          depends="compile, jar, jar-ee, copyjar, testprops, jacoco">
    <jacoco:coverage enabled="${jacoco.enabled}" destfile="${jacoco.exec}">
      <junit printsummary="true"
             showoutput="${test.showoutput}"
             timeout="${timeout}"
             fork="yes"
             errorProperty="unittest.failed"
             failureProperty="unittest.failed"
	     haltonfailure="${junit.haltonfailure}">
        <jvmarg value="-ea"/>
        <jvmarg line="${zing.jvm.options}"/>
        <formatter type="xml" if="test.verbose"/>
        <formatter type="plain" usefile="false"/>

        <!-- Set the system property testdestdir, which is used
             by TestUtils to select a place to store a JE environment -->
        <sysproperty key="testdestdir" value="${test.kvsandbox}"/>
        <!-- Set the system property failurecopydir, which is used
             by TestUtils to select a place to store failure logs when
             test fail -->
        <sysproperty key="failurecopydir" value="${test.failurecopydir}"/>
        <!-- Set the system property copylimit, which limits the number of
             failure environment saved -->
        <sysproperty key="copylimit" value="${test.copylimit}"/>
        <sysproperty key="testssldir" value="${test.srcdir}/ssl"/>
        <sysproperty key="testkrbdir" value="${test.srcdir}/kerberos"/>
        <sysproperty key="testkdcdir" value="${test.kvsandbox}/kdc"/>
        <sysproperty key="testoauthdir" value="${test.srcdir}/oauth"/>
        <!-- Set the system property java.security.policy to the policy file
             created for unit tests. -->
        <sysproperty key="java.security.policy" value="${test.policy}"/>
        <!-- Set the java util logging file to the desired value. For example,
             to run each test with logging, set
              -Djava.util.logging.config.file="kvlog.properties" -->
        <sysproperty key="java.util.logging.config.file"
                     value="${java.util.logging.config.file}"/>
        <!-- Pass along all system properties that start with oracle.kv.
             Also provide all properties that start with "test.", to
             permit passing arbitrary values to tests. -->
        <syspropertyset>
          <propertyref prefix="oracle.kv."/>
          <propertyref prefix="test."/>
        </syspropertyset>
        <!-- Specify override arguments to JE data verifier -->
        <sysproperty key="test.je.env.runVerifier"
                     value="${test.je.env.runVerifier}"/>
        <sysproperty key="test.je.env.verifierSchedule"
                     value="${test.je.env.verifierSchedule}"/>

	<!-- This should have no effect except on tests of logging behavior -->
	<sysproperty key="java.util.logging.manager"
		     value="oracle.kv.impl.util.contextlogger.ContextLogManager"/>

        <classpath>
          <path refid="test.classpath"/>
          <path refid="clover.classpath"/>
          <path refid="jacoco.classpath"/>
        </classpath>
        <test if="testcase-all-methods"
              name="${testcase}"
              todir="${test.resultsdir}"/>
        <test if="testcase-specific-methods"
              name="${testcase}"
              methods="${testcase.methods}"
              todir="${test.resultsdir}"/>
        <batchtest unless="testcase"
                   todir="${test.resultsdir}">
          <!-- Use -Dskip="blah" to skip some tests.  It is a comma-separated
               list, for example -Dskip="**/sna/**/*.class,**/rep/**/*.class"
               will skip all sna and rep tests -->
          <fileset dir="${test.destdir}"
                   includes="${test.includes}"
                   excludes="${skip}">
            <exclude name="**/standalone/**/*Test.class"/>
            <!-- Avoid running the release compatibility tests here. -->
            <exclude name="**/oracle/kv/release/**"/>
            <!-- Do not run client tests -->
            <patternset>
              <invert refid="clientTestClasses"/>
            </patternset>
            <!-- Do not run coherence tests -->
            <patternset>
              <invert refid="coherenceTestClasses"/>
            </patternset>
          </fileset>
        </batchtest>
      </junit>
    </jacoco:coverage>
    <!-- only call testclient and testcoherence if -Dtestcase was not set -->
    <condition property="nestedTestcase">
        <isset property="testcase"/>
    </condition>
    <antcall target="testclient-call"/>
    <antcall target="testcoherence-call"/>
    <fail message="UnitTests failed. Check log and/or reports.">
      <condition>
        <and>
          <or>
            <istrue value="${unittest.failed}"/>
            <not>
              <resourceexists>
                <file file="${test.clientCallPassed}"/>
              </resourceexists>
            </not>
            <not>
              <resourceexists>
                <file file="${test.coherenceCallPassed}"/>
              </resourceexists>
            </not>
          </or>
          <isfalse value="${clover.ignorefailure}"/>
        </and>
      </condition>
    </fail>
  </target>

  <!-- Test only the client API classes -->
  <target name="testclient"
          depends="compile, jar, copyjar, testprops, jacoco,
                   testclient-internal">
    <fail message="UnitTests failed. Check log and/or reports.">
      <condition>
        <and>
          <istrue value="${clientunittest.failed}"/>
          <isfalse value="${clover.ignorefailure}"/>
        </and>
      </condition>
    </fail>
  </target>

  <!-- Use this target to call testclient-internal from antcall, and
       check that the ${test.clientCallPassed} file exists to confirm
       that the test passed -->
  <target name="testclient-call"
          depends="testclient-internal, testclient-internal-passed"/>
  <target name="testclient-internal-passed" unless="clientunittest.failed">
      <echo file="${test.clientCallPassed}" message="OK"/>
  </target>

  <!-- Test only the client API classes, setting clientunittest.failed
       on failure.  Caller should provide for the following
       dependencies: compile, jar, copyjar, testprops, jacoco -->
  <target name="testclient-internal" unless="nestedTestcase">
    <delete file="${test.clientCallPassed}"/>
    <condition property="client.test.jvm"
               value="${jdk8.home}/bin/java"
               else="${jvm}">
      <isset property="jdk8.home"/>
    </condition>
    <jacoco:coverage enabled="${jacoco.enabled}" destfile="${jacoco.exec}">
      <junit printsummary="true"
             showoutput="${test.showoutput}"
             timeout="${timeout}"
             fork="yes"
             errorProperty="clientunittest.failed"
             failureProperty="clientunittest.failed"
             haltonfailure="false"
             jvm="${client.test.jvm}">
        <jvmarg value="-ea"/>
        <jvmarg line="${zing.jvm.options}"/>
        <formatter type="xml" if="test.verbose"/>
        <formatter type="plain" usefile="false"/>

        <!-- Set the system property testdestdir, which is used
             by TestUtils to select a place to store a JE environment -->
        <sysproperty key="testdestdir" value="${test.kvsandbox}"/>
        <!-- Set the system property failurecopydir, which is used
             by TestUtils to select a place to store failure logs when
             test fail -->
        <sysproperty key="failurecopydir" value="${test.failurecopydir}"/>
        <!-- Set the system property copylimit, which limits the number of
             failure environment saved -->
        <sysproperty key="copylimit" value="${test.copylimit}"/>
        <sysproperty key="testssldir" value="${test.srcdir}/ssl"/>
        <sysproperty key="testkrbdir" value="${test.srcdir}/kerberos"/>
        <sysproperty key="testkdcdir" value="${test.kvsandbox}/kdc"/>
        <sysproperty key="testoauthdir" value="${test.srcdir}/oauth"/>
        <!-- Set the system property java.security.policy to the policy file
             created for unit tests. -->
        <sysproperty key="java.security.policy" value="${test.policy}"/>
        <!-- Set the java util logging file to the desired value. For example,
             to run each test with logging, set
             -Djava.util.logging.config.file="kvlog.properties" -->
        <sysproperty key="java.util.logging.config.file"
                     value="${java.util.logging.config.file}"/>
        <!-- Pass along all system properties that start with oracle.kv.
             Also provide all properties that start with "test.", to
             permit passing arbitrary values to tests. -->
        <syspropertyset>
          <propertyref prefix="oracle.kv."/>
          <propertyref prefix="test."/>
        </syspropertyset>
        <!-- Specify override arguments to JE data verifier -->
        <sysproperty key="test.je.env.runVerifier"
                     value="${test.je.env.runVerifier}"/>
        <sysproperty key="test.je.env.verifierSchedule"
                     value="${test.je.env.verifierSchedule}"/>
        <classpath>
          <path refid="testclient.classpath"/>
          <path refid="clover.classpath"/>
          <path refid="jacoco.classpath"/>
        </classpath>
        <test if="testcase-all-methods"
              name="${testcase}"
              todir="${test.resultsdir}"/>
        <test if="testcase-specific-methods"
              name="${testcase}"
              methods="${testcase.methods}"
              todir="${test.resultsdir}"/>
        <batchtest unless="testcase"
                   todir="${test.resultsdir}">
          <intersect>
            <!-- Only run client tests -->
            <fileset dir="${test.destdir}" excludes="${skip}">
              <patternset refid="clientTestClasses"/>
            </fileset>
            <!-- Filter further by a testpackage property -->
            <fileset dir="${test.destdir}" includes="${testclient.includes}"/>
          </intersect>
        </batchtest>
      </junit>
    </jacoco:coverage>
  </target>

  <!-- Test only the coherence integration -->
  <target name="testcoherence"
          depends="compile, jar, copyjar, testprops, jacoco,
                   testcoherence-internal">
    <fail message="UnitTests failed. Check log and/or reports.">
      <condition>
        <and>
          <istrue value="${coherenceunittest.failed}"/>
          <isfalse value="${clover.ignorefailure}"/>
        </and>
      </condition>
    </fail>
  </target>

  <!-- Use this target to call testcoherence-internal from antcall, and
       check that the ${test.coherenceCallPassed} file exists to confirm
       that the test passed -->
  <target name="testcoherence-call"
          depends="testcoherence-internal, testcoherence-internal-passed"/>
  <target name="testcoherence-internal-passed"
          unless="coherenceunittest.failed">
      <echo file="${test.coherenceCallPassed}" message="OK"/>
  </target>

  <!-- Test the coherence integration, setting coherenceunittest.failed
       on failure.  The caller should provide for the following
       dependencies: compile, jar, copyjar, testprops, jacoco -->
  <target name="testcoherence-internal" unless="nestedTestcase">
    <delete file="${test.coherenceCallPassed}"/>
    <jacoco:coverage enabled="${jacoco.enabled}" destfile="${jacoco.exec}">
      <junit printsummary="true"
             showoutput="${test.showoutput}"
             timeout="${timeout}"
             fork="yes"
             errorProperty="coherenceunittest.failed"
             failureProperty="coherenceunittest.failed"
             haltonfailure="false">
        <jvmarg value="-ea"/>
        <jvmarg line="${zing.jvm.options}"/>
        <formatter type="xml" if="test.verbose"/>
        <formatter type="plain" usefile="false"/>

        <!-- Set the system property testdestdir, which is used
             by TestUtils to select a place to store a JE environment -->
        <sysproperty key="testdestdir" value="${test.kvsandbox}"/>
        <!-- Set the system property failurecopydir, which is used
             by TestUtils to select a place to store failure logs when
             test fail -->
        <sysproperty key="failurecopydir" value="${test.failurecopydir}"/>
        <!-- Set the system property copylimit, which limits the number of
             failure environment saved -->
        <sysproperty key="copylimit" value="${test.copylimit}"/>
        <!-- Set the system property java.security.policy to the policy file
             created for unit tests. -->
        <sysproperty key="java.security.policy" value="${test.policy}"/>
        <!-- Set the java util logging file to the desired value. For example,
             to run each test with logging, set
             -Djava.util.logging.config.file="kvlog.properties" -->
        <sysproperty key="java.util.logging.config.file"
                     value="${java.util.logging.config.file}"/>
        <syspropertyset>
          <propertyref prefix="oracle.kv."/>
          <propertyref prefix="test."/>
        </syspropertyset>
        <!-- Specify override arguments to JE data verifier -->
        <sysproperty key="test.je.env.runVerifier"
                     value="${test.je.env.runVerifier}"/>
        <sysproperty key="test.je.env.verifierSchedule"
                     value="${test.je.env.verifierSchedule}"/>
        <classpath>
          <path refid="testcoherence.classpath"/>
          <path refid="clover.classpath"/>
          <path refid="jacoco.classpath"/>
        </classpath>
        <test if="testcase-all-methods"
              name="${testcase}"
              todir="${test.resultsdir}"/>
        <test if="testcase-specific-methods"
              name="${testcase}"
              methods="${testcase.methods}"
              todir="${test.resultsdir}"/>
        <batchtest unless="testcase"
                   todir="${test.resultsdir}">
          <intersect>
            <!-- Only run coherence tests -->
            <fileset dir="${test.destdir}" excludes="${skip}">
              <patternset refid="coherenceTestClasses"/>
            </fileset>
            <!-- Filter further by a testpackage property -->
            <fileset dir="${test.destdir}"
                     includes="${testcoherence.includes}"/>
          </intersect>
        </batchtest>
      </junit>
    </jacoco:coverage>

  </target>

  <!-- ============================================================ -->
  <!-- Standalone Tests                                             -->
  <!-- ============================================================ -->

  <!-- Standalone tests are tests that run on the local host and
       typically take longer than unit tests.

       Run a standalone test with the 'standalone' target,
       specifying -Dtestcase=test-name, where test-name is one of the
       standalone test targets specified in the file standalone.xml in this
       directory.  Additional program arguments, if any are supported, can be
       specified using -Dargs=.  If the test is implemented as a Java program,
       JVM arguments can be specified using -Djvmargs=.

       Standalone tests can be implemented as Java programs or as shell
       scripts.  In both cases, the test program should:

       - Exit with a non-zero exit status if the test fails, and a zero
         exit status if it passes
       - Print the full command line at the start of the test
       - Allow command line arguments to be repeated, with the last
         specified argument taking precedence, to permit using -Dargs=
         to override any default arguments
       - Output results to standard output, standard error, or to files
         stored in a specified results directory
       - Store database files and other work files in a specified
         scratch directory
       - Check, as much as practical, for errors and report these as test
         failures, to reduce the amount of human auditing required of the
         results
       - Clean up any outstanding processes at the end of the test

       Individual standalone test targets in standalone.xml should:

       - Use failonerror="true", or specify resultproperty and check its
         value
       - Use output="${standalone.logfile}"
       - Pass ${standalone.resultsdir} as the directory for storing
         result files
       - Pass ${standalone.scratchdir} as the directory for storing
         database files and other work files
       - Pass program arguments using <arg> followed by
         <arg "line=${args}"> to permit overriding program arguments
         using -Dargs="..."

       The standalone ant target will make sure that the results and
       scratch directories exist and are empty.

       Individual standalone test targets implemented with Java should:

       - Use the <java> task
       - Use fork="true"
       - Pass JVM args using <jvmarg> followed by
         <jvmarg line="${jvmargs}"/> to allow overriding JVM args
         using -Djvmargs
  -->
  <target name="standalone" depends="copyjar-ee, copyjar">
    <fail unless="testcase"
          message="The testcase variable must be specified"/>
    <property name="standalone.testdir"
              location="${standalone.destdir}/${testcase}"/>
    <property name="standalone.logfile"
              location="${standalone.testdir}/test.log"/>
    <property name="standalone.scratchdir"
              location="${standalone.testdir}/scratch"/>
    <property name="standalone.resultsdir"
              location="${standalone.testdir}/results"/>

    <antcall target="clean-standalone-dir"/>

    <path id="standalone.test.classpath">
      <pathelement location="${testjarfile}"/>
      <pathelement location="${standalone.destdir}"/>
    </path>

    <echo message="Running: ${testcase}"/>
    <echo message="Overrides: args='${args}' jvmargs='${jvmargs}'"/>
    <echo message="Output will be stored in: ${standalone.logfile}"/>
    <ant antfile="standalone.xml"
         target="${testcase}"
         inheritrefs="true"/>
  </target>

  <target name="clean-standalone-dir" unless="standalone.noclean">
    <delete dir="${standalone.testdir}"/>
    <mkdir dir="${standalone.testdir}"/>
    <mkdir dir="${standalone.scratchdir}"/>
    <mkdir dir="${standalone.resultsdir}"/>
  </target>

  <!-- ============================================================ -->
  <!-- Build the distribution package.                              -->
  <!-- ============================================================ -->

  <!-- Make sure we update the version in the build properties file -->
  <path id="dist.classpath">
      <path refid="misc.class.path"/>
      <pathelement location="${dist.destdir}"/>
  </path>

  <!-- for jar packaging -->
  <target name="compile-misc" depends="compile-version, get-boot-classpath"
          if="internal.build">
      <javac srcdir="${miscdir}"
             destdir="${dist.destdir}"
             includeantruntime="true"
             debug="${build.debug}"
             source="${jdk.source.version}"
             target="${jdk.target.version}"
             bootclasspath="${jdk.boot.class.path}">
          <classpath refid="misc.class.path"/>
      </javac>
  </target>

  <target name="compile-version" depends="get-client-boot-classpath, dep-dirs"
          if="internal.build">
      <javac srcdir="${srcdir}"
             includes="oracle/kv/KVVersion.java"
             destdir="${destdir}"
             debug="${build.debug}"
             includeantruntime="false"
             source="${jdk.client.version}"
             target="${jdk.client.version}"
             bootclasspath="${jdk.client.boot.class.path}">
      </javac>
  </target>

  <target name="update-version" depends="compile-misc" if="internal.build">
     <!-- Create an up to date property file for the build -->
     <exec executable="hg"
           failifexecutionfails="false"
           outputproperty="update-version.out"
           resultproperty="update-version.result"
           logError="true">
       <arg value="id"/>
       <arg value="-i"/>
     </exec>
     <!-- Set release.id -->
     <condition property="release.id"
                value="${update-version.out}"
                else="unknown-revision">
         <equals arg1="0" arg2="${update-version.result}"/>
     </condition>

     <!-- set the time -->
     <tstamp>
       <format property="release.date"
               pattern="yyyy-MM-dd hh:mm:ss z"
               timezone="UTC"/>
     </tstamp>

     <java fork="yes" jvm="${jvm}" failonerror="true"
           classname="CreateRELEASEFile">
        <classpath refid="dist.classpath"/>
        <classpath refid="clover.classpath"/>
        <jvmarg line="${jvmargs}"/>
        <arg value="${build.propertyfile}"/>
        <arg value="${release.id}"/>
        <arg value="${release.date}"/>
     </java>

     <!-- read it in -->
     <property file="${build.propertyfile}"/>

     <!-- The major.minor.patch numbers for the release -->
     <property name="release.numbers"
               value="${release.major}.${release.minor}.${release.patch}"/>
    <echo message="Release Id: ${release.id}"/>
    <echo message="Release Date: ${release.date}"/>
    <echo message="Release Version: ${release.numbers}"/>

    <!-- Set subst-doc-url release version -->
    <condition property="subst.doc.relver.arg"
        value="${subst.doc.release.version}"
        else="${release.version}">
        <isset property="subst.doc.release.version"/>
    </condition>
  </target>

  <target name="package-test" depends="build-all">
    <description>
      This target builds just the test distribution package
    </description>
    <!-- Create a zip just for testing purpose, no need for doc, etc -->
    <zip basedir="${dist.dir}"
         destfile="${zipfile-test}"
         includes="bin/**,exttab/bin/**,lib/**"/>
  </target>

  <target name="check-ascii"
          description="Check source file contents for non-ASCII characters"
          unless="skip.release.file.checks">
      <pathconvert property="checkascii.names"
                   pathsep="${line.separator}">
          <fileset dir="${srcdir}"/>
          <fileset dir="${example.srcdir}"/>
          <fileset dir="${test.srcdir}"
                   excludes="**/*.conf, **/*.data, **/*.keys, **/*.keytab,
                             **/*.trust, **/*.sso"/>
          <fileset dir="${miscdir}"/>
          <fileset dir="${docdir}" includes="*.html, *.txt"/>
      </pathconvert>
      <echo message="${checkascii.names}"
            file="${tmpdir}/checkascii"/>
      <exec executable="python"
            input="${tmpdir}/checkascii"
            resultproperty="check.ascii.result">
          <arg value="misc/check-ascii"/>
      </exec>
      <fail message="Found non-ASCII characters in files">
        <condition>
           <not><equals arg1="${check.ascii.result}" arg2="0"/></not>
        </condition>
      </fail>
  </target>

  <target name="check-dos"
          description="Check source files for DOS-style files (with CRLF
                       terminators)"
          unless="skip.release.file.checks">
      <apply executable="${miscdir}/check-dos"
             parallel="true"
             maxparallel="200"
             failonerror="true">
          <fileset dir="${basedir}" excludes="build, dist"/>
      </apply>
  </target>

  <target name="check-commons-vulnerability"
          depends="build-all"
          description="Check for a vulnerability in the Apache commons
library reported on 11/6/2015, which involves the presence of the
InvokerTransformer class.  See:
http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/">

      <!-- Fail if the class named InvokerTransformer appears in any JAR
           file in the distribution lib directory.  We should leave this
           check in place even when and if the commons problem is fixed,
           since old versions of the library file will still have this
           vulnerability.  We can presumably narrow the search by
           package name if we find that there is an unrelated class with
           the same name. -->
      <exec executable="grep"
            failifexecutionfails="false"
            resultproperty="commons.vulnerability.result"
            outputproperty="commons.vulnerability.output">
          <arg value="-R"/>
          <arg value="InvokerTransformer"/>
          <arg value="${dist.libdir}"/>
      </exec>
      <fail message="Found Apache commons vulnerability: Class
InvokerTransformer appears in JAR files: ${commons.vulnerability.output}">
          <!-- A return code of 1 means that no match was found -->
          <condition>
              <not>
                  <equals arg1="1" arg2="${commons.vulnerability.result}"/>
              </not>
          </condition>
      </fail>
  </target>

  <target name="require-jdk-versions"
          depends="check-need-jdk8-home">
    <fail if="warn.set.jdk8.home" message="Must specify -Djdk8.home=..."/>
  </target>

  <!-- optional arguments for subst-doc-urls -->
  <condition property="subst.doc.lookup.arg"
             value="--lookup_prefix ${subst.doc.lookup.prefix}"
             else="">
    <isset property="subst.doc.lookup.prefix"/>
  </condition>
  <condition property="subst.doc.absolute.arg"
             value="--absolute_prefix ${subst.doc.absolute.prefix}"
             else="">
    <isset property="subst.doc.absolute.prefix"/>
  </condition>

  <!-- Sets kvstore.ee.ref so that kvstore-ee.jar will be referenced from
       jar Class-Path entries, if not previously set, and sets the
       release edition to "Enterprise" -->
  <target name="select-ee">
    <property name="kvstore.ee.ref" value="kvstore-ee.jar"/>
    <property name="release.edition" value="Enterprise"/>
  </target>

  <!-- Sets kvstore.ee.ref so that kvstore-ee.jar will NOT be referenced from
       jar Class-Path entries, if not previously set, and sets the
       release edition to "Community" -->
  <target name="select-ce">
    <property name="kvstore.ee.ref" value=" "/>
    <property name="release.edition" value="Community"/>
  </target>

  <!-- Sets kvstore.ee.ref so that kvstore-ee.jar will NOT be referenced from
       jar Class-Path entries, if not previously set, and sets the
       release edition to "Basic" -->
  <target name="select-be">
    <property name="kvstore.ee.ref" value=" "/>
    <property name="release.edition" value="Basic"/>
  </target>

  <!-- An alias for select-ee, as it gets called at the last minute before
       jar files are built, so that normal developer builds use the ee
       version. -->
  <target name="default-ee" depends="select-ee"/>

  <target name="package-ee"
          depends="require-jdk-versions, check-ascii, check-dos">
      <description>
          The package target builds the distribution package for the
          EE release.
      </description>

      <!-- Use antcall to force proper packaging when multiple packages
           are being built -->
      <antcall target="package-ee-internal"/>
  </target>
  <target name="package-ee-internal"
          depends="clean-dist, select-ee, copyjar-ee, build-all,
                   check-commons-vulnerability, package-test">
      <!-- copy the various distribution files into the dist dir,
           adding the current release number and date -->
      <copy overwrite="true" todir="${dist.dir}">
         <filterset>
             <filter token="RELEASE_VERSION_FULL"
                     value="${release.version.full} Enterprise Edition"/>
             <filter token="DATE" value="${release.date}"/>
         </filterset>
         <fileset dir="${docdir}">
             <include name="README.txt"/>
         </fileset>
      </copy>
      <copy file="${docdir}/LICENSE-EE.txt" tofile="${dist.dir}/LICENSE.txt"/>
      <copy file="${docdir}/LICENSE-EE.txt"
            overwrite="true"
            tofile="${dist.dir}/doc/LICENSE.txt"/>
      <copy overwrite="true" todir="${dist.dir}/doc">
         <filterset>
             <filter token="RELEASE_VERSION_FULL"
                     value="${release.version.full} Enterprise Edition"/>
             <filter token="RELEASE_VERSION"
                     value="${release.version}"/>
             <filter token="DATE" value="${release.date}"/>
         </filterset>
         <fileset dir="${docdir}">
             <include name="README.txt"/>
             <include name="index.html"/>
             <include name="relnotes.html"/>
             <include name="changelog.html"/>
         </fileset>
      </copy>
      <copy todir="${dist.dir}/doc/misc">
        <fileset dir="${docdir}/misc">
        </fileset>
      </copy>
      <copy file="${msgs_src_dir}/${msg_file_name}"
            tofile="${dist.dir}/doc/${msg_file_name}"
            overwrite="true"/>

      <exec executable="${miscdir}/subst-doc-urls"
            failonerror="true">
          <arg line="${dist.dir}
                     ${subst.doc.relver.arg}
                     ${subst.doc.lookup.arg}
                     ${subst.doc.absolute.arg}"/>
      </exec>

      <antcall target="copy-emplug-opar"/>

      <zip basedir="${dist.dir}"
           destfile="kvstore-build.zip"
           includes="bin/**,exttab/bin/**,lib/**,doc/**,*.txt,*.html"
           excludes="**/javadoc-build-time.txt,
                     lib/ycsb.jar,
                     lib/kvstoretest.jar,
                     lib/junit.jar,
                     lib/hamcrest-core.jar,
                     lib/validation-api*.jar,
                     lib/oracle.cloud.storage.api.jar,
                     lib/jettison.jar,
                     lib/jersey-core.jar,
                     lib/jersey-client.jar"/>
      <zip destfile="${zipfile-ee}">
           <zipfileset src="kvstore-build.zip"
                       prefix="kv/"
                       excludes="examples/**, exttab/bin/*"
                       filemode="444" dirmode="775"/>
           <zipfileset src="kvstore-build.zip"
                       prefix="kv/"
                       includes="exttab/bin/*"
                       filemode="555" dirmode="775"/>
      </zip>
      <delete file="kvstore-build.zip" failonerror="false"/>
  </target>

  <target name="package-ce"
          depends="require-jdk-versions, check-ascii, check-dos">
      <description>
          The package target builds the distribution package for the
          CE release.
      </description>

      <!-- Use antcall to force proper packaging when multiple packages
           are being built -->
      <antcall target="package-ce-internal"/>
  </target>
  <target name="package-ce-internal"
          depends="clean-dist, select-ce, build-all,
                   check-commons-vulnerability, package-test">
      <!-- copy the various distribution files into the dist dir,
           adding the current release number and date -->
      <copy overwrite="true" todir="${dist.dir}">
         <filterset>
             <filter token="RELEASE_VERSION_FULL"
                     value="${release.version.full} Community Edition"/>
             <filter token="DATE" value="${release.date}"/>
         </filterset>
         <fileset dir="${docdir}">
             <include name="README.txt"/>
         </fileset>
      </copy>
      <copy file="${docdir}/LICENSE-CE.txt" tofile="${dist.dir}/LICENSE.txt"/>
      <copy file="${docdir}/LICENSE-CE.txt"
            overwrite="true"
            tofile="${dist.dir}/doc/LICENSE.txt"/>
      <copy overwrite="true" todir="${dist.dir}/doc">
         <filterset>
             <filter token="RELEASE_VERSION_FULL"
                     value="${release.version.full} Community Edition"/>
             <filter token="RELEASE_VERSION"
                     value="${release.version}"/>
             <filter token="DATE" value="${release.date}"/>
         </filterset>
         <fileset dir="${docdir}">
             <include name="README.txt"/>
             <include name="index.html"/>
             <include name="relnotes.html"/>
             <include name="changelog.html"/>
         </fileset>
      </copy>

      <!-- Copy files for public ant script -->
      <copy todir="${dist.dir}">
          <fileset dir="${basedir}"
                   includes="build.xml,
                             ivy.include.xml,
                             ivy.xml,
                             ivysettings.xml"/>
      </copy>

      <copy todir="${dist.dir}/doc/misc">
        <fileset dir="${docdir}/misc">
        </fileset>
      </copy>
      <copy file="${msgs_src_dir}/${msg_file_name}"
            tofile="${dist.dir}/doc/${msg_file_name}"
            overwrite="true"/>

      <!-- Copy source files -->
      <copy todir="${dist.srcdir}">
        <fileset dir="${srcdir}">
          <exclude name="**/exttab"/>
          <exclude name="**/exttab/*"/>
          <exclude name="**/coherence"/>
          <exclude name="**/coherence/**/*"/>
          <exclude name="**/*.sql"/>
        </fileset>
      </copy>

      <exec executable="${miscdir}/subst-doc-urls"
            failonerror="true">
          <arg line="${dist.dir}
                     ${subst.doc.relver.arg}
                     ${subst.doc.lookup.arg}
                     ${subst.doc.absolute.arg}"/>
      </exec>

      <zip basedir="${dist.dir}"
           destfile="kvstore-build.zip"
           includes="bin/**,lib/**,src/**,*.xml,doc/**,*.txt,*.html"
           excludes="exttab/bin/**,
                     **/javadoc-build-time.txt,
                     lib/ycsb.jar,
                     lib/kvstoretest.jar,
                     lib/junit.jar,
                     lib/hamcrest-core.jar,
                     lib/validation-api*.jar,
                     lib/kvcoherence.jar,
                     lib/kvstore-ee.jar,
                     lib/oraclepki.jar,
                     lib/osdt*.jar,
                     lib/jdmkrt.jar,
                     lib/nosql.mib,
                     lib/oracle.cloud.storage.api.jar,
                     lib/jettison.jar,
                     lib/jersey-core.jar,
                     lib/jersey-client.jar"/>
      <zip destfile="${zipfile-ce}">
           <zipfileset src="kvstore-build.zip"
                       prefix="kv/"
                       excludes="examples/**"
                       filemode="444" dirmode="775"/>
      </zip>
      <delete file="kvstore-build.zip" failonerror="false"/>
  </target>

  <target name="package-be"
          depends="require-jdk-versions, check-ascii, check-dos">
      <description>
          The package target builds the distribution package for the
          BE release.
      </description>

      <!-- Use antcall to force proper packaging when multiple packages
           are being built -->
      <antcall target="package-be-internal"/>
  </target>
  <target name="package-be-internal"
          depends="clean-dist, select-be, build-all,
                   check-commons-vulnerability, package-test">
      <!-- copy the various distribution files into the dist dir,
           adding the current release number and date -->
      <copy overwrite="true" todir="${dist.dir}">
         <filterset>
             <filter token="RELEASE_VERSION_FULL"
                     value="${release.version.full} Basic Edition"/>
             <filter token="DATE" value="${release.date}"/>
         </filterset>
         <fileset dir="${docdir}">
             <include name="README.txt"/>
         </fileset>
      </copy>
      <copy file="${docdir}/LICENSE-BE.txt" tofile="${dist.dir}/LICENSE.txt"/>
      <copy file="${docdir}/LICENSE-BE.txt"
            overwrite="true"
            tofile="${dist.dir}/doc/LICENSE.txt"/>
      <copy overwrite="true" todir="${dist.dir}/doc">
         <filterset>
             <filter token="RELEASE_VERSION_FULL"
                     value="${release.version.full} Basic Edition"/>
             <filter token="RELEASE_VERSION"
                     value="${release.version}"/>
             <filter token="DATE" value="${release.date}"/>
         </filterset>
         <fileset dir="${docdir}">
             <include name="README.txt"/>
             <include name="index.html"/>
             <include name="relnotes.html"/>
             <include name="changelog.html"/>
         </fileset>
      </copy>
      <copy todir="${dist.dir}/doc/misc">
        <fileset dir="${docdir}/misc">
        </fileset>
      </copy>
      <copy file="${msgs_src_dir}/${msg_file_name}"
            tofile="${dist.dir}/doc/${msg_file_name}"
            overwrite="true"/>

      <exec executable="${miscdir}/subst-doc-urls"
            failonerror="true">
          <arg line="${dist.dir}
                     ${subst.doc.relver.arg}
                     ${subst.doc.lookup.arg}
                     ${subst.doc.absolute.arg}"/>
      </exec>

      <zip basedir="${dist.dir}"
           destfile="kvstore-build.zip"
           includes="bin/**,lib/**,src/**,*.xml,doc/**,*.txt,*.html"
           excludes="exttab/bin/**,
                     **/javadoc-build-time.txt,
                     lib/ycsb.jar,
                     lib/kvstoretest.jar,
                     lib/junit.jar,
                     lib/hamcrest-core.jar,
                     lib/validation-api*.jar,
                     lib/kvcoherence.jar,
                     lib/kvstore-ee.jar,
                     lib/oraclepki.jar,
                     lib/osdt*.jar,
                     lib/oracle.cloud.storage.api.jar,
                     lib/jettison.jar,
                     lib/jersey-core.jar,
                     lib/jersey-client.jar"/>
      <zip destfile="${zipfile-be}">
           <zipfileset src="kvstore-build.zip"
                       prefix="kv/"
                       excludes="examples/**"
                       filemode="444" dirmode="775"/>
      </zip>
      <delete file="kvstore-build.zip" failonerror="false"/>
  </target>

  <target name="package-client"
          depends="require-jdk-versions, check-ascii, check-dos">
      <description>
          The package target builds the distribution package for the
          Client release.
      </description>

      <!-- Use antcall to force proper packaging when multiple packages
           are being built -->
      <antcall target="package-client-internal"/>
  </target>
  <target name="package-client-internal"
          depends="clean-dist, build-all, check-commons-vulnerability,
                   package-test">
      <!-- copy the various distribution files into the dist dir,
           adding the current release number and date -->
      <copy overwrite="true" todir="${dist.dir}">
         <filterset>
             <filter token="RELEASE_VERSION_FULL"
                     value="${release.version.full} Client"/>
             <filter token="DATE" value="${release.date}"/>
         </filterset>
         <fileset dir="${docdir}">
             <include name="README.txt"/>
         </fileset>
      </copy>
      <copy file="${docdir}/LICENSE-CLIENT.txt"
            tofile="${dist.dir}/LICENSE.txt"/>
      <copy file="${docdir}/LICENSE-CLIENT.txt"
            overwrite="true"
            tofile="${dist.dir}/doc/LICENSE.txt"/>
      <copy overwrite="true" todir="${dist.dir}/doc">
         <filterset>
             <filter token="RELEASE_VERSION_FULL"
                     value="${release.version.full} Client"/>
             <filter token="RELEASE_VERSION"
                     value="${release.version}"/>
             <filter token="DATE" value="${release.date}"/>
         </filterset>
         <fileset dir="${docdir}">
             <include name="README.txt"/>
             <include name="index.html"/>
             <include name="relnotes.html"/>
             <include name="changelog.html"/>
         </fileset>
      </copy>
      <copy todir="${dist.dir}/doc/misc">
        <fileset dir="${docdir}/misc">
        </fileset>
      </copy>
      <copy file="${msgs_src_dir}/${msg_file_name}"
            tofile="${dist.dir}/doc/${msg_file_name}"
            overwrite="true"/>

      <exec executable="${miscdir}/subst-doc-urls"
            failonerror="true">
          <arg line="${dist.dir}
                     ${subst.doc.relver.arg}
                     ${subst.doc.lookup.arg}
                     ${subst.doc.absolute.arg}"/>
      </exec>

      <delete file="${dist.srcdir}/**"/>
      <exec executable="${miscdir}/kv-client-only-package.sh" dir="${basedir}"
            failOnError="true" output="${builddir}/client-only-package.out"
            logError="true">
        <arg value="${kvclientjarfile}"/>
        <arg value="${dist.srcdir}"/>
        <arg value="${docdir}/HEADER-CLIENT.txt"/>
      </exec>

      <zip basedir="${dist.dir}"
           destfile="kvstore-build.zip"
           includes="lib/kvclient.jar,lib/avro.jar,lib/jackson-core-asl.jar,
                     lib/jackson-mapper-asl.jar,lib/antlr4-runtime.jar,
                     src/**,doc/**,
                     *.txt,*.html"
           excludes="exttab/bin/**,
                     **/javadoc-build-time.txt"/>
      <zip destfile="${zipfile-client}">
           <zipfileset src="kvstore-build.zip"
                       prefix="kv/"
                       excludes="examples/**"
                       filemode="444" dirmode="775"/>
      </zip>
      <delete file="kvstore-build.zip" failonerror="false"/>
  </target>

  <target name="package-examples">
      <description>
          The package target builds the example package.
      </description>

      <!-- Use antcall to force proper packaging when multiple packages
           are being built -->
      <antcall target="package-examples-internal"/>
  </target>
  <target name="package-examples-internal"
      depends="clean-dist, build-all, check-commons-vulnerability">
      <copy file="${docdir}/LICENSE-EXAMPLES.txt" tofile="${dist.dir}/LICENSE.txt"/>
      <copy file="build-examples.xml" tofile="${dist.dir}/build.xml"/>
      <copy overwrite="true" file="${example.srcdir}/README.txt" todir="${dist.dir}">
         <filterset>
             <filter token="RELEASE_VERSION_FULL"
                     value="${release.version.full}"/>
             <filter token="RELEASE_VERSION"
                     value="${release.version}"/>
             <filter token="DATE" value="${release.date}"/>
         </filterset>
      </copy>

      <exec executable="${miscdir}/subst-doc-urls"
            failonerror="true">
          <arg line="${dist.dir}
                     ${subst.doc.relver.arg}
                     ${subst.doc.lookup.arg}
                     ${subst.doc.absolute.arg}"/>
      </exec>

      <!-- TODO: Add the async example back in when we make the async
           API public -->
      <zip basedir="${dist.dir}"
           destfile="examples-build.zip"
           includes="examples/**, build.xml, LICENSE.txt, README.txt"
           excludes="examples/README.txt,
                     examples/**/package.html,
                     examples/table/AsyncExample.java"/>
      <zip destfile="${zipfile-examples}">
           <zipfileset src="examples-build.zip"
                       prefix="kv/"
                       includes="examples/**, build.xml, LICENSE.txt, README.txt"
                       excludes="examples/**/package.html,
                                 examples/table/AsyncExample.java"
                       filemode="664" dirmode="775"/>
      </zip>
      <delete file="examples-build.zip" failonerror="false"/>
  </target>

  <target name="package-docs"
          depends="require-jdk-versions, check-ascii, check-dos">
      <description>
          The package target builds a package containing the javadoc,
          release notes, and changelog.
      </description>

      <!-- Use antcall to force proper packaging when multiple packages
           are being built -->
      <antcall target="package-docs-internal"/>
  </target>
  <target name="package-docs-internal" depends="clean-dist, all-javadoc">
      <copy overwrite="true" todir="${dist.dir}/reldoc">
         <filterset>
             <filter token="RELEASE_VERSION_FULL"
                     value="${release.version.full}"/>
             <filter token="RELEASE_VERSION"
                     value="${release.version}"/>
             <filter token="DATE" value="${release.date}"/>
         </filterset>
         <fileset dir="${docdir}">
             <include name="changelog.html"/>
             <include name="relnotes.html"/>
         </fileset>
      </copy>

      <exec executable="${miscdir}/subst-doc-urls"
          failonerror="true">
          <arg line="${dist.dir}/reldoc
              ${subst.doc.relver.arg}
              ${subst.doc.lookup.arg}
              ${subst.doc.absolute.arg}"/>
      </exec>

      <zip basedir="${dist.dir}"
           destfile="kvstore-build.zip"
           includes="javadoc/java-api/**,
                     javadoc/examples/**,
                     reldoc/**"/>
      <zip destfile="${zipfile-docs}">
           <zipfileset src="kvstore-build.zip"
                       prefix="kv/"
                       filemode="444" dirmode="775"/>
      </zip>
      <delete file="kvstore-build.zip" failonerror="false"/>
  </target>

  <target name="package-release"
          description="Create all release packages"
          depends="package-ce-release, package-ee-release, package-be-release,
                   package-client-release, package-example-release,
                   package-docs-release"/>

  <target name="package-client-release"
          depends="package-client, update-version"
          description="Create release package for Client release">

    <!-- Add release numbers to directory -->
    <property name="prefix" value="kv-${release.numbers}"/>
    <property name="releasedir" value="${builddir}/${prefix}"/>
    <delete dir="${releasedir}" quiet="yes"/>
    <unzip src="${zipfile-client}" dest="${releasedir}">
      <mapper type="glob" from="kv/*" to="*"/>
    </unzip>

    <!-- Create zip file -->
    <property name="kv-client-release-zip"
              value="${basedir}/kv-client-${release.numbers}.zip"/>
    <delete file="${kv-client-release-zip}"/>
    <zip destfile="${kv-client-release-zip}">
      <zipfileset dir="${builddir}"
                  includes="${prefix}/**"
                  excludes="${prefix}/examples/**"
                  filemode="444" dirmode="775"/>
    </zip>
    <chmod perm="555" file="${kv-client-release-zip}"/>

    <!-- Create gzip'ed tar file -->
    <property name="kv-client-release-tar-gz"
              value="${basedir}/kv-client-${release.numbers}.tar.gz"/>
    <delete file="${kv-client-release-tar-gz}"/>
    <tar destfile="${kv-client-release-tar-gz}" compression="gzip">
      <tarfileset dir="${builddir}"
                  includes="${prefix}/**"
                  excludes="${prefix}/examples/**"
                  filemode="444" dirmode="775"
                  uid="100" username="kv"
                  gid="100" group="kv"/>
    </tar>
    <chmod perm="555" file="${kv-client-release-tar-gz}"/>

    <!-- Clean up -->
    <delete dir="${releasedir}"/>
  </target>

  <target name="package-ce-release"
          depends="package-ce, update-version"
          description="Create release package for CE release">

    <!-- Add release numbers to directory -->
    <property name="prefix" value="kv-${release.numbers}"/>
    <property name="releasedir" value="${builddir}/${prefix}"/>
    <delete dir="${releasedir}" quiet="yes"/>
    <unzip src="${zipfile-ce}" dest="${releasedir}">
      <mapper type="glob" from="kv/*" to="*"/>
    </unzip>

    <!-- Create zip file -->
    <property name="kv-ce-release-zip"
              value="${basedir}/kv-ce-${release.numbers}.zip"/>
    <delete file="${kv-ce-release-zip}"/>
    <zip destfile="${kv-ce-release-zip}">
      <zipfileset dir="${builddir}"
                  includes="${prefix}/**"
                  excludes="${prefix}/examples/**"
                  filemode="444" dirmode="775"/>
    </zip>
    <chmod perm="555" file="${kv-ce-release-zip}"/>

    <!-- Create gzip'ed tar file -->
    <property name="kv-ce-release-tar-gz"
              value="${basedir}/kv-ce-${release.numbers}.tar.gz"/>
    <delete file="${kv-ce-release-tar-gz}"/>
    <tar destfile="${kv-ce-release-tar-gz}" compression="gzip">
      <tarfileset dir="${builddir}"
                  includes="${prefix}/**"
                  excludes="${prefix}/examples/**"
                  filemode="444" dirmode="775"
                  uid="100" username="kv"
                  gid="100" group="kv"/>
    </tar>
    <chmod perm="555" file="${kv-ce-release-tar-gz}"/>

    <!-- Clean up -->
    <delete dir="${releasedir}"/>
  </target>

  <target name="package-ee-release"
          depends="package-ee, update-version"
          description="Create release package for EE release">

    <!-- Add release numbers to directory -->
    <property name="prefix" value="kv-${release.numbers}"/>
    <property name="releasedir" value="${builddir}/${prefix}"/>
    <delete dir="${releasedir}" quiet="yes"/>
    <unzip src="${zipfile-ee}" dest="${releasedir}">
      <mapper type="glob" from="kv/*" to="*"/>
    </unzip>

    <!-- Create zip file -->
    <property name="kv-ee-release-zip"
              value="${basedir}/kv-ee-${release.numbers}.zip"/>
    <delete file="${kv-ee-release-zip}"/>
    <zip destfile="${kv-ee-release-zip}">
      <zipfileset dir="${builddir}"
                  includes="${prefix}/**"
                  excludes="${prefix}/examples/**, ${prefix}/exttab/bin/*"
                  filemode="444" dirmode="775"/>
      <zipfileset dir="${builddir}"
                  includes="${prefix}/exttab/bin/*"
                  filemode="555" dirmode="775"/>
    </zip>
    <chmod perm="555" file="${kv-ee-release-zip}"/>

    <!-- Create gzip'ed tar file -->
    <property name="kv-ee-release-tar-gz"
              value="${basedir}/kv-ee-${release.numbers}.tar.gz"/>
    <delete file="${kv-ee-release-tar-gz}"/>
    <tar destfile="${kv-ee-release-tar-gz}" compression="gzip">
      <tarfileset dir="${builddir}"
                  includes="${prefix}/**"
                  excludes="${prefix}/examples/**, ${prefix}/exttab/bin/*"
                  filemode="444" dirmode="775"
                  uid="100" username="kv"
                  gid="100" group="kv"/>
      <tarfileset dir="${builddir}"
                  includes="${prefix}/exttab/bin/*"
                  filemode="555" dirmode="775"
                  uid="100" username="kv"
                  gid="100" group="kv"/>
    </tar>
    <chmod perm="555" file="${kv-ee-release-tar-gz}"/>

    <!-- Clean up -->
    <delete dir="${releasedir}"/>
  </target>

  <target name="package-be-release"
          depends="package-be, update-version"
          description="Create release package for BE release">

    <!-- Add release numbers to directory -->
    <property name="prefix" value="kv-${release.numbers}"/>
    <property name="releasedir" value="${builddir}/${prefix}"/>
    <delete dir="${releasedir}" quiet="yes"/>
    <unzip src="${zipfile-be}" dest="${releasedir}">
      <mapper type="glob" from="kv/*" to="*"/>
    </unzip>

    <!-- Create zip file -->
    <property name="kv-be-release-zip"
              value="${basedir}/kv-be-${release.numbers}.zip"/>
    <delete file="${kv-be-release-zip}"/>
    <zip destfile="${kv-be-release-zip}">
      <zipfileset dir="${builddir}"
                  includes="${prefix}/**"
                  excludes="${prefix}/examples/**"
                  filemode="444" dirmode="775"/>
    </zip>
    <chmod perm="555" file="${kv-be-release-zip}"/>

    <!-- Create gzip'ed tar file -->
    <property name="kv-be-release-tar-gz"
              value="${basedir}/kv-be-${release.numbers}.tar.gz"/>
    <delete file="${kv-be-release-tar-gz}"/>
    <tar destfile="${kv-be-release-tar-gz}" compression="gzip">
      <tarfileset dir="${builddir}"
                  includes="${prefix}/**"
                  excludes="${prefix}/examples/**"
                  filemode="444" dirmode="775"
                  uid="100" username="kv"
                  gid="100" group="kv"/>
    </tar>
    <chmod perm="555" file="${kv-be-release-tar-gz}"/>

    <!-- Clean up -->
    <delete dir="${releasedir}"/>
  </target>

  <target name="package-example-release"
          depends="package-examples, update-version"
          description="Create release package for examples release">

    <!-- Add release numbers to directory -->
    <property name="prefix" value="kv-${release.numbers}"/>
    <property name="releasedir" value="${builddir}/${prefix}"/>
    <delete dir="${releasedir}" quiet="yes"/>
    <unzip src="${zipfile-examples}" dest="${releasedir}">
      <mapper type="glob" from="kv/*" to="*"/>
    </unzip>

    <!-- Create zip file -->
    <property name="kv-examples-release-zip"
              value="${basedir}/kv-examples-${release.numbers}.zip"/>
    <delete file="${kv-examples-release-zip}"/>
    <zip destfile="${kv-examples-release-zip}">
      <zipfileset dir="${builddir}"
                  includes="${prefix}/**"
                  filemode="664" dirmode="775"/>
    </zip>
    <chmod perm="555" file="${kv-examples-release-zip}"/>

    <!-- Create gzip'ed tar file -->
    <property name="kv-examples-release-tar-gz"
              value="${basedir}/kv-examples-${release.numbers}.tar.gz"/>
    <delete file="${kv-examples-release-tar-gz}"/>
    <tar destfile="${kv-examples-release-tar-gz}" compression="gzip">
      <tarfileset dir="${builddir}"
                  includes="${prefix}/**"
                  filemode="664" dirmode="775"
                  uid="100" username="kv"
                  gid="100" group="kv"/>
    </tar>
    <chmod perm="555" file="${kv-examples-release-tar-gz}"/>

    <!-- Clean up -->
    <delete dir="${releasedir}"/>
  </target>

  <target name="package-docs-release"
          depends="package-docs, update-version"
          description="Create release package for docs">

    <!-- Add release numbers to directory -->
    <property name="prefix" value="kv-${release.numbers}"/>
    <property name="releasedir" value="${builddir}/${prefix}"/>
    <delete dir="${releasedir}" quiet="yes"/>
    <unzip src="${zipfile-docs}" dest="${releasedir}">
      <mapper type="glob" from="kv/*" to="*"/>
    </unzip>

    <!-- Create zip file -->
    <property name="kv-docs-release-zip"
              value="${basedir}/kv-docs-${release.numbers}.zip"/>
    <delete file="${kv-docs-release-zip}"/>
    <zip destfile="${kv-docs-release-zip}">
      <zipfileset dir="${builddir}"
                  includes="${prefix}/**"
                  filemode="664" dirmode="775"/>
    </zip>
    <chmod perm="555" file="${kv-docs-release-zip}"/>

    <!-- Create gzip'ed tar file -->
    <property name="kv-docs-release-tar-gz"
              value="${basedir}/kv-docs-${release.numbers}.tar.gz"/>
    <delete file="${kv-docs-release-tar-gz}"/>
    <tar destfile="${kv-docs-release-tar-gz}" compression="gzip">
      <tarfileset dir="${builddir}"
                  includes="${prefix}/**"
                  filemode="664" dirmode="775"
                  uid="100" username="kv"
                  gid="100" group="kv"/>
    </tar>
    <chmod perm="555" file="${kv-docs-release-tar-gz}"/>

    <!-- Clean up -->
    <delete dir="${releasedir}"/>
  </target>

  <target name="package-ee-source"
          depends="update-version"
          description="Create source package for EE release">

    <!-- Use Mercurial to create a list of all checked in files -->
    <exec executable="hg"
          dir="${basedir}/.."
          output="${builddir}/hgfiles"
          failOnError="true">
        <arg value="manifest"/>
    </exec>

    <property name="kv-ee-source-tar-gz"
              value="${basedir}/kv-ee-source-${release.numbers}.tar.gz"/>
    <delete file="${kv-ee-source-tar-gz}"/>
    <tar destfile="${kv-ee-source-tar-gz}"
         compression="gzip"
         longfile="gnu">
      <tarfileset prefix="kv-source-${release.numbers}"
                  dir="${basedir}/.."
                  includesfile="${builddir}/hgfiles"/>
    </tar>
  </target>

  <!-- ============================================================ -->
  <!-- Build and test RPMs                                          -->
  <!-- ============================================================ -->

  <target name="build-rpms" depends="update-version, clean-rpms">
    <description>
      Build RPM packages using the results of the package-{ee,ce}-release
      targets.  This target only works on Linux where rpm is supported.
    </description>

    <!-- Unzip the compressed release tar file -->
    <mkdir dir="${rpmbuilddir}"/>
    <gunzip src="kv-ce-${release.numbers}.tar.gz"
            dest="${rpmbuilddir}/kv-ce.tar"/>
    <gunzip src="kv-ee-${release.numbers}.tar.gz"
            dest="${rpmbuilddir}/kv-ee.tar"/>

    <!-- Build the binary and source tar files to use for the RPMs -->
    <property name="rpm-ce-bin-tar"
              value="${rpmbuilddir}/kv-ce-${release.numbers}.tar.gz"/>
    <tar destfile="${rpm-ce-bin-tar}" compression="gzip">
      <mappedresources>
        <tarfileset src="${rpmbuilddir}/kv-ce.tar"
                    excludes="kv-${release.numbers}/src/**"/>
        <globmapper from="kv-${release.numbers}/*"
                    to="kv-ce-${release.numbers}/*"/>
      </mappedresources>
    </tar>
    <property name="rpm-ee-bin-tar"
              value="${rpmbuilddir}/kv-ee-${release.numbers}.tar.gz"/>
    <tar destfile="${rpm-ee-bin-tar}" compression="gzip">
      <mappedresources>
        <tarfileset src="${rpmbuilddir}/kv-ee.tar"
                    excludes="kv-${release.numbers}/src/**"/>
        <globmapper from="kv-${release.numbers}/*"
                    to="kv-ee-${release.numbers}/*"/>
      </mappedresources>
    </tar>
    <property name="rpm-src-tar"
              value="${rpmbuilddir}/kv-source-${release.numbers}.tar.gz"/>
    <tar destfile="${rpm-src-tar}" compression="gzip">
      <mappedresources>
        <tarfileset src="${rpmbuilddir}/kv-ce.tar"
                    includes="kv-${release.numbers}/src/**,
                              kv-${release.numbers}/LICENSE.txt"/>
        <globmapper from="kv-${release.numbers}/*"
                    to="kv-source-${release.numbers}/*"/>
      </mappedresources>
    </tar>

    <!-- Build the RPMs -->
    <mkdir dir="${rpmbuilddir}/BUILD"/>
    <mkdir dir="${rpmbuilddir}/RPMS"/>
    <mkdir dir="${rpmbuilddir}/SOURCES"/>
    <mkdir dir="${rpmbuilddir}/SPECS"/>
    <copy todir="${rpmbuilddir}/SPECS">
      <fileset dir="${miscdir}/rpm" includes="*.spec"/>
    </copy>
    <copy file="${rpm-ce-bin-tar}" todir="${rpmbuilddir}/SOURCES"/>
    <copy file="${rpm-ee-bin-tar}" todir="${rpmbuilddir}/SOURCES"/>
    <copy file="${rpm-src-tar}" todir="${rpmbuilddir}/SOURCES"/>
    <rpm specFile="kv-source.spec"
         topDir="${rpmbuilddir}"
         command="-v -bb"
         failOnError="true"
         output="${rpmbuilddir}/src-rpm.out"
         error="${rpmbuilddir}/src-rpm.err"/>
    <rpm specFile="kv-ce.spec"
         topDir="${rpmbuilddir}"
         command="-v -bb"
         failOnError="true"
         output="${rpmbuilddir}/bin-ce-rpm.out"
         error="${rpmbuilddir}/bin-ce-rpm.err"/>
    <rpm specFile="kv-ee.spec"
         topDir="${rpmbuilddir}"
         command="-v -bb"
         failOnError="true"
         output="${rpmbuilddir}/bin-ee-rpm.out"
         error="${rpmbuilddir}/bin-ee-rpm.err"/>
    <pathconvert property="rpms" pathsep=" ">
      <fileset dir="${rpmbuilddir}" includes="RPMS/**"/>
    </pathconvert>
    <echo message="Built RPMs: ${rpms}"/>
  </target>

  <target name="test-rpms"
          description="Test the RPMs created by the build-rpms target">
    <exec executable="rpm">
      <arg line="-i -v --test ${rpmbuilddir}/RPMS/noarch/*"/>
    </exec>
  </target>

  <!-- ============================================================ -->
  <!-- Release artifacts for consumption by the spartakv build      -->
  <!-- Instructions: -->
  <!--   1. ant package-release-for-spartakv -Dsk.artifact.id="id" -->
  <!--  e.g.:  ant package-release-for-spartakv -Dsk.artifact.id="default.17" -->
  <!--   2. manually upload (scp or other) the artifact (e.g. kv-4.6.0-default.17.tar.gz) to: -->
  <!--  sleepycat-tools.us.oracle.com:/a/releases/sk -->
  <!-- ============================================================ -->

  <!-- no javadoc required in cloud package -->
  <target name="skip-javadoc-for-ee-sk-release">
    <property name="javadoc.not.needed" value="true"/>
  </target>

  <target name="spartakv-dependencies">
    <fail unless="release.numbers">
      Property "release.numbers" is not set.
    </fail>
    <fail unless="sk.artifact.id">
      Property "sk.artifact.id" is not set.
    </fail>
  </target>

  <target name="package-release-for-spartakv"
          depends="check-need-jdk8-home,
                   update-version,
                   spartakv-dependencies,
                   skip-javadoc-for-ee-sk-release,
                   package-ee-internal"
          description="Create release artifacts for Cloud release">

    <property name="kv-ee-sk-tar-gz"
       value="${basedir}/kv-${release.numbers}-${sk.artifact.id}.tar.gz"/>

    <!-- Add release numbers to directory -->
    <property name="prefix" value="kv-${release.numbers}"/>
    <property name="releasedir" value="${builddir}/${prefix}"/>

    <!-- unzip the built release archive -->
    <delete dir="${releasedir}" quiet="yes"/>
    <unzip src="${zipfile-ee}" dest="${releasedir}">
      <mapper type="glob" from="kv/*" to="*"/>
    </unzip>

    <!-- Create kv-ee release artifact -->
    <delete file="${kv-ee-sk-tar-gz}"/>
    <tar destfile="${kv-ee-sk-tar-gz}" compression="gzip">
      <tarfileset dir="${builddir}"
                  includes="${prefix}/**"
                  excludes="${prefix}/examples/**, ${prefix}/exttab/**, ${prefix}/doc/**"
                  filemode="444" dirmode="775"
                  uid="100" username="kv"
                  gid="100" group="kv"/>
    </tar>
    <chmod perm="555" file="${kv-ee-sk-tar-gz}"/>

    <!-- Clean up -->
    <delete dir="${releasedir}"/>
  </target>

  <!-- ============================================================ -->
  <!-- Build the public API javadoc                                 -->
  <!-- ============================================================ -->

  <target name="all-javadoc"
          depends="javadoc, example-javadoc, internal-javadoc"/>

  <target name="can-we-skip-javadoc">
    <uptodate targetfile="${javadoc}/javadoc-build-time.txt"
              property="javadoc.not.needed">
      <srcfiles dir="${srcdir}" includes="**/*"/>
    </uptodate>
  </target>

  <exec outputproperty="dns.domain.name"
        executable="dnsdomainname" os="Linux"/>
  <exec outputproperty="dns.domain.name"
        executable="sed" os="Mac OS X">
      <arg value="-n"/>
      <arg value="-e"/>
      <arg value="s/search \(.*\)/\1/p"/>
      <arg file="/etc/resolv.conf"/>
  </exec>

  <!-- Set the proxy host to the internal web proxy if the
       javadoc.proxy.host property is not set and current DNS search
       domain ends in "*.oracle.com" -->
  <condition property="javadoc.proxy.host" value="www-proxy" else="">
    <and>
      <not><isset property="javadoc.proxy.host"/></not>
      <matches pattern=".*[.]oracle[.]com$"
               string="${dns.domain.name}"/>
    </and>
  </condition>

  <condition property="javadoc.proxy.host.isset">
    <and>
      <isset property="javadoc.proxy.host"/>
      <not><equals arg1="${javadoc.proxy.host}" arg2="" trim="true"/></not>
    </and>
  </condition>

  <target name="check-proxy" if="javadoc.proxy.host.isset">
    <echo message="Using HTTP proxy for Javadoc: ${javadoc.proxy.host}:${javadoc.proxy.port}"/>
  </target>

  <target name="javadoc"
          depends="can-we-skip-javadoc, update-version, ivy-resolve,
                   gen-messages, check-proxy, clean-javadoc-tmp"
          unless="javadoc.not.needed">

    <javadoc sourcepath="${srcdir}"
             destdir="${javadoc.tmpdir}"
             excludepackagenames="oracle.kv.impl.*"
             version="true"
             nodeprecated="false"
             protected="true"
             source="${jdk.source.version}"
             bootclasspath="${jdk.boot.class.path}"
             use="true"
             docletpath="${docdir}/HidingDoclet.jar"
             stylesheetfile="${javadoc.css}"
             windowtitle="Oracle NoSQL Database API"
             failonerror="true"
             executable="${javadoc.exec}">
      <classpath refid="src.classpath"/>
      <arg value="-author"/>
      <doclet name="HidingDoclet"/>
      <tag name="hiddensee" enabled="false"/>
      <header><![CDATA[<b>Oracle NoSQL Database</b><br><font size=\"-1\"> version ${release.version.full}</font>]]>
      </header>
      <bottom><![CDATA[<font size=1>${copyright}</font>]]> </bottom>
      <package name="oracle.kv"/>
      <package name="oracle.kv.coherence"/>
      <package name="oracle.kv.lob"/>
      <package name="oracle.kv.avro"/>
      <package name="oracle.kv.exttab"/>
      <package name="oracle.kv.query"/>
      <package name="oracle.kv.stats"/>
      <package name="oracle.kv.table"/>
      <package name="oracle.kv.hadoop"/>
      <package name="oracle.kv.hadoop.table"/>
      <package name="oracle.kv.hadoop.hive.table"/>
      <package name="oracle.kv.mgmt.jmx"/>
      <package name="oracle.kv.pubsub"/>
      <link href="${java.apidoc}"/>
      <link href="${avro.apidoc}"/>
      <link href="${jackson.apidoc}"/>
      <link href="${coherence.apidoc}"/>
      <link href="${hadoop.common.apidoc}"/>
      <link href="${hadoop.mapreduce.client.apidoc}"/>
      <link href="${hadoop.apidoc}"/>
      <link href="${hive.apidoc}"/>
      <arg value="-J-Dhttp.proxyHost=${javadoc.proxy.host}"/>
      <arg value="-J-Dhttp.proxyPort=${javadoc.proxy.port}"/>
    </javadoc>
    <!-- Copy and filter for @RELEASE_VERSION@ -->
    <copy overwrite="true" todir="${javadoc}">
        <filterset>
            <filter token="RELEASE_VERSION"
                value="${release.version}"/>
        </filterset>
        <fileset dir="${javadoc.tmpdir}"/>
    </copy>
    <delete dir="${javadoc.tmpdir}"/>

    <exec executable="${miscdir}/subst-doc-urls"
        failonerror="true">
        <arg line="${dist.dir}
            ${subst.doc.relver.arg}
            ${subst.doc.lookup.arg}
            ${subst.doc.absolute.arg}"/>
    </exec>

    <!-- Copy the standard Java CSS style sheet -->
    <copy tofile="${javadoc}/standard-stylesheet.css">
      <javaresource
        name="com/sun/tools/doclets/internal/toolkit/resources/stylesheet.css"/>
    </copy>
    <echo file="${javadoc}/javadoc-build-time.txt" message="${release.date}"/>

  </target>

  <!-- ============================================================ -->
  <!-- Build the internal javadoc                                   -->
  <!-- ============================================================ -->

  <target name="internal-javadoc"
          depends="update-version, ivy-resolve, gen-messages,
                   check-proxy, clean-javadoc-tmp"
          unless="javadoc.not.needed"
          description="Build javadoc including hidden APIs">

    <javadoc sourcepath="${srcdir}"
             destdir="${javadoc.tmpdir}"
             version="true"
             nodeprecated="false"
             package="true"
             source="${jdk.source.version}"
             bootclasspath="${jdk.boot.class.path}"
             use="true"
             stylesheetfile="${javadoc.css}"
             windowtitle="Oracle NoSQL Database Internal APIs"
             failonerror="true"
             executable="${javadoc.exec}">
      <classpath refid="src.classpath"/>
      <arg value="-author"/>
      <arg value="-Xdoclint:none"/>
      <tag name="hidden" description="This item is hidden"/>
      <tag name="hiddensee" description="Hidden See Also:"/>
      <header><![CDATA[<b>Oracle NoSQL Database</b><br><font size=\"-1\"> version ${release.version.full}</font>]]>
      </header>
      <bottom><![CDATA[<font size=1>${copyright}</font>]]> </bottom>
      <link href="${java.apidoc}"/>
      <link href="${avro.apidoc}"/>
      <link href="${jackson.apidoc}"/>
      <link href="${coherence.apidoc}"/>
      <link href="${hadoop.common.apidoc}"/>
      <link href="${hadoop.mapreduce.client.apidoc}"/>
      <link href="${hadoop.apidoc}"/>
      <link href="${hive.apidoc}"/>
      <arg value="-J-Dhttp.proxyHost=${javadoc.proxy.host}"/>
      <arg value="-J-Dhttp.proxyPort=${javadoc.proxy.port}"/>
    </javadoc>
    <!-- Copy and filter for @RELEASE_VERSION@ -->
    <copy overwrite="true" todir="${internal.javadoc}">
        <filterset>
            <filter token="RELEASE_VERSION"
                value="${release.version}"/>
        </filterset>
        <fileset dir="${javadoc.tmpdir}"/>
    </copy>
    <delete dir="${javadoc.tmpdir}"/>

      <exec executable="${miscdir}/subst-doc-urls"
            failonerror="true">
          <arg line="${dist.dir}
                     ${subst.doc.relver.arg}
                     ${subst.doc.lookup.arg}
                     ${subst.doc.absolute.arg}"/>
      </exec>

    <!-- Copy the standard Java CSS style sheet -->
    <copy tofile="${internal.javadoc}/standard-stylesheet.css">
      <javaresource
        name="com/sun/tools/doclets/internal/toolkit/resources/stylesheet.css"/>
    </copy>
  </target>

  <!-- ============================================================ -->
  <!-- Build the example javadoc                                    -->
  <!-- ============================================================ -->
  <target name="can-we-skip-example-javadoc">
    <uptodate targetfile="${example.javadoc}/javadoc-build-time.txt"
              property="javadoc.not.needed">
      <srcfiles dir="${example.srcdir}" includes="**/*"/>
    </uptodate>
  </target>

  <target name="example-javadoc"
          depends="can-we-skip-example-javadoc, ivy-resolve, gen-messages,
                   update-version, check-proxy, javadoc"
          unless="javadoc.not.needed">
    <!-- set the time -->
    <tstamp>
       <format property="release.date" pattern="MMMMMMMM dd, yyyy"/>
    </tstamp>

    <!-- Copy the javadoc so the examples javadoc can reference to it -->
    <copy overwrite="true" todir="${builddir}/javadoc/java-api">
        <fileset dir="${javadoc}"/>
    </copy>

    <javadoc sourcepath="${srcdir}:${example.srcdir}"
             destdir="${javadoc.tmpdir}"
             excludepackagenames="oracle.kv.*"
             version="true"
             nodeprecated="false"
             access="package"
             source="${jdk.source.version}"
             bootclasspath="${jdk.boot.class.path}"
             use="true"
             docletpath="${docdir}/HidingDoclet.jar"
             stylesheetfile="${javadoc.css}"
             windowtitle="Oracle NoSQL Database Examples"
             failonerror="true"
             executable="${javadoc.exec}">
      <classpath refid="src.classpath"/>
      <arg value="-author"/>
      <doclet name="HidingDoclet"/>
      <header><![CDATA[<b>Oracle NoSQL Database Examples</b><br><font size=\"-1\"> version ${release.version.full}</font>]]>
      </header>
      <bottom><![CDATA[<font size=1>${copyright}</font>]]> </bottom>
      <package name="coherence"/>
      <package name="externaltables"/>
      <package name="hello"/>
      <package name="hadoop"/>
      <package name="hadoop.table"/>
      <package name="hadoop.hive.table"/>
      <package name="pubsub"/>
      <package name="security"/>
      <package name="seqnum"/>
      <!-- Specify the table package separately so we can exclude
           particular classes -->
      <!-- TODO: Add the async example back in when we make the async
           API public -->
      <fileset dir="${example.srcdir}"
               includes="**/table/*.java"
               excludes="**/table/AsyncExample.java"/>
      <link href="../java-api"/>
      <link href="${java.apidoc}"/>
      <link href="${avro.apidoc}"/>
      <link href="${jackson.apidoc}"/>
      <link href="${coherence.apidoc}"/>
      <link href="${hadoop.common.apidoc}"/>
      <link href="${hadoop.mapreduce.client.apidoc}"/>
      <link href="${hadoop.apidoc}"/>
      <link href="${hive.apidoc}"/>
      <arg value="-J-Dhttp.proxyHost=${javadoc.proxy.host}"/>
      <arg value="-J-Dhttp.proxyPort=${javadoc.proxy.port}"/>
    </javadoc>
    <!-- Copy and filter for @RELEASE_VERSION@ -->
    <copy overwrite="true" todir="${example.javadoc}">
        <filterset>
            <filter token="RELEASE_VERSION"
                value="${release.version}"/>
        </filterset>
        <fileset dir="${javadoc.tmpdir}"/>
    </copy>
    <delete dir="${javadoc.tmpdir}"/>

    <exec executable="${miscdir}/subst-doc-urls"
        failonerror="true">
        <arg line="${dist.dir}
            ${subst.doc.relver.arg}
            ${subst.doc.lookup.arg}
            ${subst.doc.absolute.arg}"/>
    </exec>

    <!-- Copy the standard Java CSS style sheet -->
    <copy tofile="${example.javadoc}/standard-stylesheet.css">
      <javaresource
        name="com/sun/tools/doclets/internal/toolkit/resources/stylesheet.css"/>
    </copy>

    <!-- Copy external tables cookbook.html to doc/examples -->
    <copy file="${example.kvstore}/externaltables/cookbook.html" tofile="${example.javadoc}/externaltables/cookbook.html"/>

    <echo file="${example.javadoc}/javadoc-build-time.txt" message="${release.date}"/>
  </target>

  <!-- ==================================================================== -->
  <!-- Clover, code coverage. To run with clover                            -->
  <!--     1. Set the clover.libdir property above.                         -->
  <!--     2. Make sure the clover.jar and clover.license are in            -->
  <!--           the $clover.libdir directory.                              -->
  <!--     3. Run "ant with.clover" to check clover is configured correctly.-->
  <!--     4. Run "ant clover-test" to run code coverage against unnittests.-->
  <!--           Alternatively, run "ant clover-testclient" to run just the -->
  <!--           testclient subset of tests.  The testcase properties works -->
  <!--           correctly in conjunction with clover-testclient and        -->
  <!--           clover-testclient.                                         -->
  <!-- ==================================================================== -->
  <target name="with.clover">
    <taskdef resource="cloverlib.xml" classpathref="clover.classpath"/>
    <taskdef resource="cloverjunitlib.xml" classpathref="clover.classpath"/>
    <!-- The instrumentLambda="block" setting below is a workaround for a
         problem involving Lambda expressions in
         SerializeExceptionUtilTest. -->
    <clover-setup initString="${clover.tmpdir}/kvstorecoverage.db"
                  flushpolicy="interval"
                  flushinterval="5000"
                  instrumentLambda="block">
    </clover-setup>
  </target>

  <!-- The patternset controlling what files in the src tree are analyzed. -->
  <patternset id="clover.src">
    <exclude name="oracle/kv/util/internal/*.java"/>
  </patternset>

  <!-- The patternset controlling what files in the test tree are analyzed. -->
  <patternset id="clover.test">
    <exclude name="scripts/framework/*.java"/>
    <exclude name="query/src/qt/*.java"/>
    <exclude name="query/src/qt/framework/*.java"/>
  </patternset>

  <target name="clover.html" depends="with.clover">
    <clover-report>
      <current outfile="clover_html"
               title="Code Coverage Test for Oracle NoSQL Database">
        <format type="html" orderBy="ElementsCoveredAsc"/>
        <fileset dir="src">
          <patternset refid="clover.src"/>
        </fileset>
        <fileset dir="test">
          <patternset refid="clover.test"/>
        </fileset>
        <testsources dir="test/oracle" includes="**/*.java"/>
      </current>
    </clover-report>
  </target>

  <target name="clover.pdf" depends="with.clover">
    <clover-pdf-report outfile="coverage.pdf"/>
  </target>

  <target name="clover.xml" depends="with.clover">
    <clover-report>
      <current outfile="coverage.xml">
        <format type="xml"/>
        <fileset dir="src">
          <patternset refid="clover.src"/>
        </fileset>
        <fileset dir="test">
          <patternset refid="clover.test"/>
        </fileset>
        <testsources dir="test/oracle" includes="**/*.java"/>
      </current>
    </clover-report>
  </target>

  <target name="clover.log" depends="with.clover">
    <clover-log/>
  </target>

  <target name="clover-test" depends="clean, with.clover">
    <antcall target="test" />
    <antcall target="clover.html"/>
  </target>

  <target name="clover-testclient" depends="clean, with.clover">
    <antcall target="testclient" />
    <antcall target="clover.html"/>
  </target>

  <target name="clover-clean">
    <delete dir="${clover.tmpdir}"/>
  </target>

  <!-- ==================================================================== -->
  <!-- JaCoCo                                                               -->
  <!-- Provides code coverage analysis similar to what Clover produces, but -->
  <!-- in a more basic format. Provides quick turnaround coverage analysis. -->
  <!-- No configuration steps are required. Use the following targets:      -->
  <!--    jacoco-clean - deletes the current coverage measurement database  -->
  <!--      and report output.                                              -->
  <!--    jacoco-test - runs the test target with code coverage measurement -->
  <!--      enabled and builds a coverage report upon completion.  The      -->
  <!--      testcase and testcase.methods properties can be used to control -->
  <!--      what tests are run.  Note that this incrementally updates the   -->
  <!--      coverage database so you can run multiple tests with separate   -->
  <!--      testcase targets and the output will reflect the cumulative     -->
  <!--      testing.                                                        -->
  <!--    jacoco-testclient - same general description as jacoco-test, but  -->
  <!--      applies to the testclient target instead of the test target.    -->
  <!-- Generated output can be seen by pointing your browser at the file    -->
  <!--    ${basedir}/build/jacoco/report/index.html                         -->
  <!-- ==================================================================== -->

  <!-- Ensure that jacoco is available for use -->
  <target name="jacoco" depends="ivy-resolve">
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
      <classpath path="${jacoco.libdir}/jacocoant.jar"/>
    </taskdef>
  </target>

  <target name="with-jacoco" depends="jacoco">
    <property name="jacoco.enabled" value="true"/>
    <!-- set the jacoco.jvm.extraargs property -->
    <jacoco:agent property="jacoco.jvm.extraargs"
          enabled="${jacoco.enabled}" destfile="${jacoco.exec}"/>
  </target>

  <!-- Run the test target, with jacoco coverage analysis included.
       Incrementally updates coverage database. -->
  <target name="jacoco-test" depends="with-jacoco">
    <antcall target="test" />
    <antcall target="jacoco-report"/>
  </target>

  <!-- Run the testclient target, with jacoco coverage analysis included.
       Incrementally updates coverage database. -->
  <target name="jacoco-testclient" depends="with-jacoco">
    <antcall target="testclient" />
    <antcall target="jacoco-report"/>
  </target>

  <target name="jacoco-testcoherence" depends="with-jacoco">
    <antcall target="testcoherence" />
    <antcall target="jacoco-report"/>
  </target>

  <!-- Generate the JaCoCo coverage report.
       See ${basedir}/build/jacoco/report/index.html for output. -->
  <target name="jacoco-report" depends="jacoco">
    <jacoco:report>
        <executiondata>
            <file file="${jacoco.exec}"/>
        </executiondata>

        <structure name="KVStore">
            <classfiles>
                <fileset dir="${basedir}/build/classes">
                  <exclude name="com/sleepycat/**/*.class"/>
                </fileset>
            </classfiles>
            <sourcefiles encoding="UTF-8">
                <fileset dir="src"/>
            </sourcefiles>
        </structure>
        <html destdir="${jacoco.report}"/>
    </jacoco:report>
    <echo message="Open ${jacoco.report}/index.html to view the report."/>
  </target>

  <!-- Remove the JaCoCo coverage database and report output. -->
  <target name="jacoco-clean">
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${jacoco.report}"/>
    </delete>
    <delete file="${jacoco.exec}" failonerror="false"/>
  </target>

  <!-- ==================================================================== -->
  <!-- Checkstyle                                                           -->
  <!-- ==================================================================== -->

  <target name="checkstyle" depends="dep-dirs, ivy-resolve"
          description="Run checkstyle on all source files">
    <!-- Define the checkstyle task -->
    <taskdef resource="checkstyletask.properties"
             classpathref="checkstyle.classpath"/>
    <checkstyle config="misc/kvstore_checks.xml">
      <classpath>
        <path refid="src.classpath"/>
        <path location="${destdir}"/>
      </classpath>
      <fileset dir="${srcdir}" includes="${checkstyle.include}"/>
      <fileset dir="${example.srcdir}" includes="${checkstyle.include}"/>
      <fileset dir="${test.srcdir}" includes="${checkstyle.include}"/>
      <formatter type="plain"/>
    </checkstyle>
  </target>

  <!-- ==================================================================== -->
  <!-- FindBugs                                                             -->
  <!-- ==================================================================== -->

  <target name="findbugs" depends="jar"
          description="Run findbugs on kvstore.jar">
    <!-- Define the findbugs task -->
    <taskdef name="findbugs"
             classpath="${extlibdir}/findbugs-ant.jar"
             classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>
    <!-- Convert the path reference to a property, since FindBugs
         doesn't understand path references.  Only do the conversion
         after Ivy resolution has occurred, since pathconvert seems to
         only includes entries when the files are present. -->
    <pathconvert property="findbugs.classpath" refid="findbugs.classpath"/>
    <findbugs classpath="${findbugs.classpath}"
              pluginList=""
              output="${findbugs.output}"
              outputFile="${findbugs.output.file}"
              failOnError="true"
              errorProperty="findbugs.errors"
              warningsProperty="findbugs.warnings">
      <class location="${jarfile}"/>
      <sourcePath path="${srcdir}"/>
      <auxClasspath>
        <path refid="src.classpath"/>
      </auxClasspath>
    </findbugs>
    <fail if="findbugs.errors"
          message="Findbugs failed"/>
    <fail if="findbugs.warnings"
          message="Findbugs produced warnings"/>
  </target>

  <!-- ==================================================================== -->
  <!-- Eclipse warnings                                                     -->
  <!-- ==================================================================== -->

  <target name="warnings" depends="copyjar"
          description="Generate Eclipse warnings">

    <fail message="Only works on Unix/Linux">
      <condition><not><os family="unix"/></not></condition>
    </fail>

    <fail message="${eclipse.jar} not specified or does not exist">
      <condition><not><available file="${eclipse.jar}"/></not></condition>
    </fail>

    <exec executable="find" output="warnings.tmp">
      <arg value="${srcdir}"/>
      <arg value="${example.srcdir}"/>
      <arg value="${test.srcdir}"/>
      <arg value="-name"/>
      <arg value="*.java"/>
      <!-- Ignore files used for release testing, because they duplicate
           other class names in an uninteresting way -->
      <arg value="-not"/>
      <arg value="-path"/>
      <arg value="${test.srcdir}/oracle/kv/release/*"/>
      <arg value="-not"/>
      <arg value="-path"/>
      <arg value="${test.srcdir}/release/*"/>
    </exec>

    <java jar="${eclipse.jar}" output="warnings"
          fork="true" resultproperty="warnings.resultproperty">
      <arg value="-cp"/>
      <arg pathref="test.classpath"/>
      <arg value="-d"/>
      <arg value="none"/>
      <arg value="-${jdk.source.version}"/>
      <arg value="-properties"/>
      <arg file="${eclipse.properties}"/>
      <arg value="-enableJavadoc"/>
      <arg line="${warnings.format}"/>
      <arg value="@warnings.tmp"/>
    </java>

    <delete file="warnings.tmp"/>

    <fail message="Eclipse compile failed, see file: warnings">
      <condition>
        <isfailure code="${warnings.resultproperty}"/>
      </condition>
    </fail>

    <fail message="See file: warnings">
      <condition>
        <length file="warnings" when="greater" length="0"/>
      </condition>
    </fail>

    <echo message="No warnings are present"/>
  </target>

</project>
